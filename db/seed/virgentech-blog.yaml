%YAML 1.1
---
-
  id: 1
  user_id: 1
  title: "New Site Coming Soon!"
  url: "new-site-coming-soon"
  description: "<p>The new VirgenTech website is nearly ready for launch!</p>"
  content: "<p>I've been busy the last few months building a new VirgenTech website. I plan to use this site to host my blog and code samples.</p>\r\n\r\n<p>I'm currently working on fixing the login functionality. It seems that the OpenID component of the Zend Framework requires PHP to be compiled with GMP, so I'll need to get that working before login will work.</p>\r\n\r\n<p>Once the login works I can spend more time blogging about the changes and posting code samples. I'll also be importing my old blog entries from Blogger.</p>"
  status: "published"
  created: "2010-01-30 16:08:26"
  published: "2010-01-30 16:08:26"
-
  id: 2
  user_id: 1
  title: "Login is Now Working"
  url: "login-is-now-working"
  description: "<p>\r\n	You can now log in to VirgenTech, and the &quot;code&quot; tab is up and running!</p>"
  content: "<p>\r\n	You can now log in to virgentech! In order to support OpenID, I had to recompile PHP from source to include the gmp extension.</p>\r\n<p>\r\n	The only issue I&#39;m running into now is getting tidy to work. It seems that I need to also compile tidy from source, but the website was down the last time I looked. Hopefully I&#39;ll get that up and running soon to ensure that comments come in as clean HTML.</p>\r\n<p>\r\n	I&#39;ve also updated the &quot;Code&quot; tab. I finished adding support to create code entries and edit them. I plan on using the &quot;code&quot; tab to showcase some of the code I&#39;m working on.</p>"
  status: "published"
  created: "2010-02-01 21:33:18"
  modified: "2010-02-04 21:58:35"
  published: "2010-02-01 21:33:18"
-
  id: 3
  user_id: 1
  title: "New Site is Now Live!"
  url: "new-site-is-now-live"
  description: "<p>\r\n	The new VirgenTech Website is now live!</p>\r\n<div firebugversion=\"1.5.0\" id=\"_firebugConsole\" style=\"display: none;\">\r\n	&nbsp;</div>"
  content: "<p>\r\n	I just pushed the new website to my main server -- so whatcha think?</p>\r\n<p>\r\n	There are still a few edges to polish but overall the basic functionality I need is in. Here&#39;s what&#39;s new:</p>\r\n<p>\r\n	<strong>Rebuilt from scratch.<br />\r\n	</strong></p>\r\n<p>\r\n	The entire site was rebuilt using the latest conventions of the Zend Framework, including the usage of Zend_Tool and Zend_Application. This means a much cleaner architecture and I got to learn a lot about it on the way.</p>\r\n<p>\r\n	<strong>New Code Section.<br />\r\n	</strong></p>\r\n<p>\r\n	I rebuilt the code section to make it easy for me to create code entries from the web. My previous site was admittedly lacking in this area, and I needed to SSH into my web server in order to update code samples.</p>\r\n<p>\r\n	<strong>Blogs Rebuilt.<br />\r\n	</strong></p>\r\n<p>\r\n	The entire engine powering this blog has been rebuilt using the data mapper pattern and Zend_Acl. This makes it easier for me to maintain, meaning more features will be coming soon (like tags).</p>\r\n<p>\r\n	I&#39;m also using a lot of the latest components like Zend_Navigation, Zend_Paginator, and Zend_Feed_Writer.</p>\r\n<p>\r\n	Overall this has been a great learning experience. The Zend Framework has come a long way since I first started using it back in the 1.0 days. Using it&#39;s new features has helped me appreciate it that much more.</p>\r\n<p>\r\n	Some of the things I plan on working on next are guest comment support and maybe, just maybe, tree-based comments.</p>"
  status: "published"
  created: "2010-02-04 19:37:20"
  published: "2010-02-04 19:37:19"
-
  id: 4
  user_id: 1
  title: "Building a Smarter Model Layer"
  url: "building-smarter-model-layer"
  description: "<p>\r\n	My experiences with using the Data Mapper pattern in Zend Framework applications.</p>"
  content: "<p>\r\n	I have been spending the last several months learning the &quot;<a href=\"http://martinfowler.com/eaaCatalog/dataMapper.html\">Data Mapper</a>&quot; pattern as suggested in the <a href=\"http://framework.zend.com/manual/en/learning.quickstart.intro.html\">Zend Framework Quickstart</a>. At first glance it seems simple, intuitive, and straight-forward -- the model contains the business rules, and the mapper is used to persist the model in the database. This separation of concerns can make the task of refactoring later much simpler and also allows for easier unit testing.</p>\r\n<p>\r\n	But when tasked at building a site that is more complex than a simple guestbook, the path is less clear.</p>\r\n<p>\r\n	My first attempt at implementing this pattern in my model layer at first proved to be useful. I started off by creating a series of &quot;models&quot;, or objects that could be represented with nouns such as &quot;user&quot;, &quot;blog post&quot;, and &quot;comment&quot;. I built an abstract model class that provided magic getters/setters. I created mappers for each model to persist them in a database. I created lazy-loading collections and reference objects so that I could traverse through related models as needed. And, finally, I introduced a service layer to create a single point of entry to my models.</p>\r\n<pre class=\"brush:php\">\r\n// Abstract model class (simplified)\r\nabstract class Virgen_Model_Abstract\r\n{\r\n    protected $_data = array();\r\n    \r\n    public function __get($key)\r\n    {\r\n        return $this-&gt;_data[$key];\r\n    }\r\n    \r\n    public function __set($key, $value)\r\n    {\r\n        $this-&gt;_data[$key] = $value;\r\n    }\r\n}\r\n\r\nclass Default_Model_BlogPost extends Virgen_Model_Abstract\r\n{\r\n    protected $_data = array(\r\n        &#39;id&#39; =&gt; null,\r\n        &#39;user&#39; =&gt; null,\r\n        /* ... */\r\n    );\r\n}</pre>\r\n<p>\r\n	All was well -- or so it seemed.</p>\r\n<p>\r\n	When all was said and done, I noticed that my models were relatively thin. Most of them ended up as &quot;dumb&quot; containers of data and, thanks to my magic getters and setters, were more like glorified associative arrays. My service layer, however, was weighing in at a few thousand lines of code. So what happened?</p>\r\n<p>\r\n	It turns out that <a href=\"http://martinfowler.com/bliki/AnemicDomainModel.html\">my models were suffering from anemia</a>.</p>\r\n<p>\r\n	After reading Fowler&#39;s blog about anemic domain models, I decided to take a step back and start over. I wanted to be sure that if I&#39;m going to use the data mapper pattern that I&#39;m going to use it correctly.</p>\r\n<p>\r\n	With this in mind I put together two objectives:</p>\r\n<ol>\r\n	<li>\r\n		Remove the abstract model class. While useful, all that magic was making it too easy to be lazy.</li>\r\n	<li>\r\n		Clean up the service layer by moving all model-specific code into the model itself.</li>\r\n</ol>\r\n<p>\r\n	For the first part, I removed the abstract model class and redesigned my models to use real getters/setters for each property. This allowed me to enforce certain things like the user of a blog must be an instance of Default_Model_User.</p>\r\n<pre class=\"brush:php\">\r\n// New blog post model (excerpt)\r\nclass Default_Model_BlogPost\r\n{\r\n    protected $_user;\r\n    \r\n    /* ... */\r\n    \r\n    public function setUser(Default_Model_User $user)\r\n    {\r\n        $this-&gt;_user = $user;\r\n    }\r\n    \r\n    /* ... */\r\n}\r\n</pre>\r\n<p>\r\n	Now that my models have true getters/setters, I can be sure to include type hinting and even provide some functionality to them.</p>\r\n<p>\r\n	One of the areas that I&#39;ve improved upon is the editing of the models through the use of forms. In my previous code, I used a service layer to create and populate a form:</p>\r\n<pre class=\"brush:php\">\r\n$blogsService = new Default_Service_Blogs();\r\n$blog = $blogsService-&gt;find(123);\r\n$form = $blogsService-&gt;getEditForm($blog);</pre>\r\n<p>\r\n	I&#39;ve now moved that functionality into the model itself, meaning that a model is able to create and populate a form for editing itself:</p>\r\n<pre class=\"brush:php\">\r\n$blogsService = new Default_Service_Blogs();\r\n$blog = $blogsService-&gt;find(123);\r\n$form = $blog-&gt;getForm();</pre>\r\n<p>\r\n	This makes a big difference in what my blog model can do. Since it has access to it&#39;s own form, I can now use it for validation and also create new blog posts just as easily:</p>\r\n<pre class=\"brush:php\">\r\n$blog = new Default_Model_BlogPost();\r\n$form = $blog-&gt;getForm(); // returns empty form\r\n</pre>\r\n<p>\r\n	Some of the things I am still working on is:</p>\r\n<ul>\r\n	<li>\r\n		How to handle ACL checks. I previously had my service layer handle this, but with a thinning service layer I may need to support this directly in the model.</li>\r\n	<li>\r\n		How to handle lazy-loading references for &quot;belongs-to&quot; or &quot;has-one&quot; relationships.</li>\r\n</ul>\r\n<p>\r\n	Overall, this new design appears to be overall more solid than my previous one. I am currently using it in a newly created VirgenTech website. I&#39;m building it form the ground up using this design to see how well it works in a not-so-simple website.</p>"
  status: "published"
  created: "2010-02-01 21:10:12"
  modified: "2010-02-04 21:33:30"
  published: "2010-02-01 21:10:12"
-
  id: 5
  user_id: 1
  title: "Lazy Loading and Data Mappers"
  url: "lazy-loading-and-data-mappers"
  description: "<p>\r\n	How to use lazy loading to write efficient data mappers.</p>"
  content: "<p>\r\n	Lazy loading is a simple yet powerful tool in any developer&#39;s tool box, and its knack for procrastination is especially useful in domain modeling.</p>\r\n<p>\r\n	Let&#39;s say we&#39;re building a simple blogging application, and each blog post can have 0 or more comments. So we may have models like this:</p>\r\n<pre class=\"brush:php\">\r\nclass Blog\r\n{\r\n    protected $_title;\r\n    protected $_body;\r\n    protected $_comments = array();\r\n}\r\n\r\nclass Comment\r\n{\r\n    protected $_blog;\r\n    protected $_from;\r\n    protected $_body;\r\n}\r\n</pre>\r\n<p>\r\n	When developing your data mapper, you may intuitively want to load all the comments for the blog post when loading a blog from the database. However, you may not need all the comments. For example, you may simply be showing a list of all blog posts and are not displaying the comments at all. It would be unnecessary to load the comments, but your data mapper won&#39;t know how much information is needed when you request the object.</p>\r\n<p>\r\n	This is where lazy loading can help. To solve this, you&#39;ll want to crate a lazy-loading iterator. Initially, this iterator would be given the information it needs to build the collection, without actually building the collection itself.</p>\r\n<p>\r\n	So what kind of information does the iterator need? Only two things: a data mapper class (or instance), and a list of IDs. When the iterator is iterated, the instance is fetched by calling find() on the mapper with the current iteration&#39;s ID. Here&#39;s an example:</p>\r\n<pre class=\"brush:php\">\r\nclass CommentCollection implements SeekableIterator\r\n{\r\n    protected $_ids = array();\r\n    protected $_mapper;\r\n    protected $_instances = array();\r\n    protected $_position = 0;\r\n\r\n    public function setIds(array $ids)\r\n    {\r\n        $this-&gt;_ids = $ids;\r\n        $this-&gt;_instances = array();\r\n    }\r\n\r\n    public function getIds()\r\n    {\r\n        return $this-&gt;_ids;\r\n    }\r\n\r\n    public function setMapper($mapper)\r\n    {\r\n        $this-&gt;_mapper = $mapper;\r\n    }\r\n\r\n    public function getMapper()\r\n    {\r\n        if (is_string($this-&gt;_mapper)) {\r\n            $this-&gt;_mapper = new $this-&gt;_mapper;\r\n        }\r\n        return $this-&gt;_mapper;\r\n    }\r\n\r\n    public function key()\r\n    {\r\n        return $this-&gt;_position;\r\n    }\r\n\r\n    public function next()\r\n    {\r\n        ++$this-&gt;_position;\r\n    }\r\n\r\n    public function rewind()\r\n    {\r\n        $this-&gt;_position = 0;\r\n    }\r\n\r\n    public function valid()\r\n    {\r\n        return array_key_exists($this-&gt;_position, $this-&gt;_ids);\r\n    }\r\n\r\n    public function seek($position)\r\n    {\r\n        $this-&gt;_position = (int) $position;\r\n    }\r\n\r\n    public function current()\r\n    {\r\n        if (array_key_exists($this-&gt;_position, $this-&gt;_instances)) {\r\n            $this-&gt;_instances[$this-&gt;_position] = $this-&gt;getMapper()-&gt;find($this-&gt;_ids[$this-&gt;_position]);\r\n        }\r\n    return $this-&gt;_instances[$this-&gt;_position];\r\n}\r\n}</pre>\r\n<p>\r\n	Now, instead of passing an array of fully instantiated comments to your Blog, you can pass in this iterator. But, as you may have noticed, in order for this to work, the iterator must have a list of comment IDs. Since we may not be displaying the comments at all, let&#39;s take this one step further and make the comment IDs lazy-loaded, too. In order to do this, we&#39;ll create a new class that uses this one. But instead of giving it an array of IDs, we&#39;ll give it a callback function that it can use when first iterating through it.</p>\r\n<pre class=\"brush:php\">\r\nclass CommentCollectionLoader implements SeekableIterator\r\n{\r\n    protected $_collection;\r\n    protected $_mapper;\r\n    protected $_arguments = array();\r\n    protected $_method;\r\n\r\n    public function setIds(array $ids)\r\n    {\r\n        $this-&gt;getCollection()-&gt;setIds(array $ids);\r\n    }\r\n\r\n    public function getIds()\r\n    {\r\n        return $this-&gt;getCollection()-&gt;getIds();\r\n    }\r\n\r\n    public function setMapper($mapper)\r\n    {\r\n        $this-&gt;_mapper = $mapper;\r\n    }\r\n\r\n    public function getMapper()\r\n    {\r\n        if (is_string($this-&gt;_mapper)) {\r\n            $this-&gt;_mapper = new $this-&gt;_mapper;\r\n        }\r\n        return $this-&gt;_mapper;\r\n    }\r\n\r\n    public function setMethod($method)\r\n    {\r\n        $this-&gt;_method = $method;\r\n    }\r\n\r\n    public function getMethod()\r\n    {\r\n        return $this-&gt;_method;\r\n    }\r\n\r\n    public function setArguments(array $arguments)\r\n    {\r\n        $this-&gt;_arguments = $arguments;\r\n    }\r\n\r\n    public function getArguments()\r\n    {\r\n        return $this-&gt;_arguments;\r\n    }\r\n\r\n    public function getCollection()\r\n    {\r\n        if (null === $this-&gt;_collection) {\r\n            $this-&gt;_collection = new CommentCollection();\r\n            $ids = call_user_func_array(array($this-&gt;getMapper(), $this-&gt;_method), $this-&gt;_arguments);\r\n            $this-&gt;_collection-&gt;setIds($ids);\r\n        }\r\n        return $this-&gt;_collection;\r\n    }\r\n\r\n    public function key()\r\n    {\r\n        return $this-&gt;getCollection()-&gt;key();\r\n    }\r\n\r\n    public function next()\r\n    {\r\n        $this-&gt;getCollection()-&gt;next();\r\n    }\r\n\r\n    public function rewind()\r\n    {\r\n        $this-&gt;getCollection()-&gt;rewind();\r\n    }\r\n\r\n    public function valid()\r\n    {\r\n        return $this-&gt;getCollection()-&gt;valid();\r\n    }\r\n\r\n    public function seek($position)\r\n    {\r\n        $this-&gt;getCollection()-&gt;seek($position);\r\n    }\r\n\r\n    public function current()\r\n    {\r\n        return $this-&gt;getCollection()-&gt;current();\r\n    }\r\n}</pre>\r\n<p>\r\n	The difference is that now this new collection can be instantiated and passed in directly to the Blog instance without invoking any additional SQL queries until the very moment you need it.</p>\r\n<pre class=\"brush:php\">\r\n$blog = new Blog();\r\n$comments = new CommentCollectionLoader();\r\n$comments-&gt;setMapper(&#39;CommentMapper&#39;);\r\n$comments-&gt;setMethod(&#39;findByBlog&#39;);\r\n$comments-&gt;setArguments(array($blog));\r\n$blog-&gt;setComments($comments);\r\n\r\nforeach ($blog-&gt;getComments as $comment) {\r\n    assert($comment instanceof Comment); // true\r\n}\r\n</pre>\r\n<p>\r\n	By following this pattern throughout your data mappers, you can effectively traverse throughout the entire domain from just a single instance, and only the required queries will run.</p>"
  status: "published"
  created: "2010-01-18 21:11:17"
  modified: "2010-02-05 15:16:00"
  published: "2010-01-18 21:11:17"
-
  id: 6
  user_id: 1
  title: "Building an Object-Oriented jQuery Plugin"
  url: "building-object-oriented-jquery-plugin"
  description: "<p>\r\n	Learn how to use your OOP skills in jQuery.</p>"
  content: "<p>\r\n	<strong>Update: Jamie Talbot has written <a href=\"http://jamietalbot.com/2010/08/22/object-oriented-jquery-plugins/\">an excellent article</a> that improves this method and is definitely worth a read.</strong></p>\r\n<p>\r\n	So you&#39;ve been using <a href=\"http://www.jquery.com/\">jQuery</a> as your Javascript framework and now you need to write a plugin. If you come from an Object-Oriented background like me, you may feel that jQuery&#39;s plugins leave a lot to be desired.</p>\r\n<p>\r\n	The basic formula to create a jQuery plugin is to extend the plugin namespace with a single method:</p>\r\n<pre class=\"brush:js\">\r\n#myplugin.js\r\n\r\njQuery.fn.myplugin = function()\r\n{\r\n   // Do some cool stuff here\r\n}\r\n</pre>\r\n<p>\r\n	While that seems all fine and dandy for simple plugins, you may need to create more robust plugins that do many things, often in a non-linear fashion.</p>\r\n<p>\r\n	Some plugins get around this by adding tons of methods to jQuery&#39;s plugin namespace.</p>\r\n<pre class=\"brush:js\">\r\n$(&#39;#test&#39;).plugin();\r\n$(&#39;#test&#39;).pluginAdd(&#39;stuff&#39;);\r\n$(&#39;#test&#39;).pluginRemove(&#39;other stuff&#39;);\r\n$(&#39;#test&#39;).pluginDoSomethingCool();\r\n</pre>\r\n<p>\r\n	I personally don&#39;t like that approach because it pollutes the jQuery plugin namespace with lots of methods. I personally like to stick to just one plugin method per plugin.</p>\r\n<p>\r\n	Other plugins use the first parameter of the plugin to call methods:</p>\r\n<pre class=\"brush:js\">\r\n$(&#39;#test&#39;).plugin();\r\n$(&#39;#test&#39;).plugin(&#39;add&#39;, &#39;stuff&#39;);\r\n$(&#39;#test&#39;).plugin(&#39;remove&#39;, &#39;other stuff&#39;);\r\n$(&#39;#test&#39;).plugin(&#39;doSomethingCool&#39;);\r\n</pre>\r\n<p>\r\n	I think this approach is a little awkward, especially if the plugin accepts an options object the first time it is created. This approachs means you would have to either write a switch of all the methods you want to expose, or blindly accept any string as a method name.</p>\r\n<p>\r\n	To get around these hurdles, I&#39;ve created a basic template for jQuery plugins that provides access to an Object-Oriented interface if needed while still maintaining jQuery&#39;s simplicity of a single method in the plugin namespace.</p>\r\n<p>\r\n	The first thing you need to do is wrap all your plugin code in an anonymous function. This will help keep things nice and tidy without creating global variables.</p>\r\n<pre class=\"brush:js\">\r\n#myplugin.js\r\n\r\n(function($){\r\n   // Your plugin code goes here\r\n})(jQuery);\r\n</pre>\r\n<p>\r\n	Next, create your plugin as a class, where the first parameter is a single DOM element.</p>\r\n<pre class=\"brush:js\">\r\n#myplugin.js\r\n\r\n(function($){\r\n   var MyPlugin = function(element)\r\n   {\r\n       var elem = $(element);\r\n       var obj = this;\r\n\r\n       // Public method\r\n       this.publicMethod = function()\r\n       {\r\n           console.log(&#39;publicMethod() called!&#39;);\r\n       };\r\n   };\r\n})(jQuery);\r\n</pre>\r\n<p>\r\n	To make your new object-oriented class available as a jQuery plugin, write a simple wrapper function in the plugin namespace:</p>\r\n<pre class=\"brush:js\">\r\n#myplugin.js\r\n\r\n(function($){\r\n   var MyPlugin = function(element)\r\n   {\r\n       var elem = $(element);\r\n       var obj = this;\r\n\r\n       // Public method\r\n       this.publicMethod = function()\r\n       {\r\n           console.log(&#39;publicMethod() called!&#39;);\r\n       };\r\n   };\r\n\r\n   $.fn.myplugin = function()\r\n   {\r\n       return this.each(function()\r\n       {\r\n           var myplugin = new MyPlugin(this);\r\n       });\r\n   };\r\n})(jQuery);\r\n</pre>\r\n<p>\r\n	Now, when you call $(element).myplugin(), the jQuery plugin instantiates an instance of MyPlugin, passing the element as the first argument.</p>\r\n<p>\r\n	But now there&#39;s a problem of how to get the object &quot;myplugin&quot; once it&#39;s been created. For this, I usually store the object in the elements data. This provides easy access to the object while allowing you to prevent accidental double instantiation in the event that the plugin was called again on the same element.</p>\r\n<pre class=\"brush:js\">\r\n#myplugin.js\r\n\r\n(function($){\r\n   var MyPlugin = function(element)\r\n   {\r\n       var elem = $(element);\r\n       var obj = this;\r\n\r\n       // Public method\r\n       this.publicMethod = function()\r\n       {\r\n           console.log(&#39;publicMethod() called!&#39;);\r\n       };\r\n   };\r\n\r\n   $.fn.myplugin = function()\r\n   {\r\n       return this.each(function()\r\n       {\r\n           var element = $(this);\r\n          \r\n           // Return early if this element already has a plugin instance\r\n           if (element.data(&#39;myplugin&#39;)) return;\r\n\r\n           var myplugin = new MyPlugin(this);\r\n\r\n           // Store plugin object in this element&#39;s data\r\n           element.data(&#39;myplugin&#39;, myplugin);\r\n       });\r\n   };\r\n})(jQuery);\r\n</pre>\r\n<p>\r\n	Now you have easy access to the object should you need to run methods on it.</p>\r\n<pre class=\"brush:js\">\r\n$(&#39;#test&#39;).myplugin();\r\nvar myplugin = $(&#39;#test&#39;).data(&#39;myplugin&#39;);\r\nmyplugin.publicMethod(); // prints &quot;publicMethod() called!&quot; to console\r\n</pre>\r\n<p>\r\n	If you need to get fancy and add options parameter or other required parameters, just pass them from the jQuery plugin to your plugin&#39;s constructor:</p>\r\n<pre class=\"brush:js\">\r\n#myplugin.js\r\n\r\n(function($){\r\n   var MyPlugin = function(element, options)\r\n   {\r\n       var elem = $(element);\r\n       var obj = this;\r\n\r\n       // Merge options with defaults\r\n       var settings = $.extend({\r\n           param: &#39;defaultValue&#39;\r\n       }, options || {});\r\n\r\n       // Public method\r\n       this.publicMethod = function()\r\n       {\r\n           console.log(&#39;publicMethod() called!&#39;);\r\n       };\r\n   };\r\n\r\n   $.fn.myplugin = function(options)\r\n   {\r\n       return this.each(function()\r\n       {\r\n           var element = $(this);\r\n          \r\n           // Return early if this element already has a plugin instance\r\n           if (element.data(&#39;myplugin&#39;)) return;\r\n\r\n           // pass options to plugin constructor\r\n           var myplugin = new MyPlugin(this, options);\r\n\r\n           // Store plugin object in this element&#39;s data\r\n           element.data(&#39;myplugin&#39;, myplugin);\r\n       });\r\n   };\r\n})(jQuery);\r\n</pre>\r\n<p>\r\n	You may also want to expose some of your object&#39;s methods while keeping others private. To make a private method, create a local function within your object using the <code>var</code> keyword:</p>\r\n<pre class=\"brush:js\">\r\n#myplugin.js\r\n\r\n(function($){\r\n   var MyPlugin = function(element, options)\r\n   {\r\n       var elem = $(element);\r\n       var obj = this;\r\n       var settings = $.extend({\r\n           param: &#39;defaultValue&#39;\r\n       }, options || {});\r\n       \r\n       // Public method - can be called from client code\r\n       this.publicMethod = function()\r\n       {\r\n           console.log(&#39;public method called!&#39;);\r\n       };\r\n\r\n       // Private method - can only be called from within this object\r\n       var privateMethod = function()\r\n       {\r\n           console.log(&#39;private method called!&#39;);\r\n       };\r\n   };\r\n\r\n   $.fn.myplugin = function(options)\r\n   {\r\n       return this.each(function()\r\n       {\r\n           var element = $(this);\r\n          \r\n           // Return early if this element already has a plugin instance\r\n           if (element.data(&#39;myplugin&#39;)) return;\r\n\r\n           // pass options to plugin constructor\r\n           var myplugin = new MyPlugin(this, options);\r\n\r\n           // Store plugin object in this element&#39;s data\r\n           element.data(&#39;myplugin&#39;, myplugin);\r\n       });\r\n   };\r\n})(jQuery);\r\n</pre>\r\n<p>\r\n	To see an example of a plugin I wrote that uses this template, check out my <a href=\"http://www.virgentech.com/code/view/id/3\">Tagger</a> plugin.</p>"
  status: "published"
  created: "2009-10-04 21:13:18"
  modified: "2010-08-23 14:17:43"
  published: "2009-10-04 21:13:18"
-
  id: 7
  user_id: 1
  title: "Lazy Loading and Traversables in PHP5"
  url: "lazy-loading-traversables-php5"
  description: "<p>How to take advantage of PHP5's iterators by using lazy loading.</p>"
  content: "<p>In my <a href=\"http://blog.virgentech.com/2009/08/lazy-loading-resources-in-php.html\" rel=\"previous\">previous blog post</a>, I demonstrated a simple implementation of lazy loading and how it can be used to load resources on demand. While the concept of lazy loading is simple, it can be used to solve many problems in real world applications.</p>\r\n\r\n<p>For example, let's say you are building a simple quiz application. Each quiz can have multiple questions, and each question can have multiple answer choices. When it comes to domain modelling, you may want to access a quiz's questions directly from its model like this:</p>\r\n\r\n<pre class=\"brush:php\">\r\n$id = 123;\r\n$quiz = new Quiz($id);\r\n$questions = $quiz->getQuestions(); // returns array of Question objects\r\n</pre>\r\n\r\n<p>\r\nTaking a closer look at the Quiz class, we can see what is happening when the getQuestions is called:\r\n</p>\r\n\r\n<pre class=\"brush:php\">\r\nclass Quiz\r\n{\r\n    /* ... */\r\n    protected $_questions = null;\r\n\r\n    public function getQuestions()\r\n    {\r\n        if (null === $this->_questions) {\r\n            // Perform some magic to load the questions\r\n        }\r\n        return $this->_questions;\r\n    }\r\n}\r\n</pre>\r\n\r\n<p>\r\nWhile this is a form of lazy loading, it may still be providing us with too much information. For example, let's say the questions are displayed to the user one at a time. There's certainly no need to load and instantiate all of those Question objects if we only need to display one.\r\n</p>\r\n<p>Part of the problem is that, currently, $this->_questions is an array, and arrays are not flexible enough for lazy loading. That's where the Iterator interface comes into play.</p>\r\n<p>By using the Iterator as a container for the questions and adding a lazy-loading mechanism to the current() method, we can improve the efficiency of container by only loading what we need when we need it.</p>\r\n<pre class=\"brush:php\">\r\nclass QuestionsContainer implements Iterator\r\n{\r\n    protected $_questionIds = array();\r\n\r\n    protected $_questionInstances = array();\r\n\r\n    protected $_position = 0;\r\n\r\n    public function __construct(array $ids)\r\n    {\r\n        $this->_questionIds = array_values($ids);\r\n    }\r\n\r\n    public function rewind()\r\n    {\r\n        $this->_position = 0;\r\n    }\r\n\r\n    public function next()\r\n    {\r\n        ++$this->_position;\r\n    }\r\n\r\n    public function key()\r\n    {\r\n        return $this->_position;\r\n    }\r\n\r\n    public function valid()\r\n    {\r\n        return isset($this->_questionIds[$this->_position]);\r\n    }\r\n\r\n    public function current()\r\n    {\r\n        if (!isset($this->_questionInstances[$this->_position])) {\r\n            $id = $this->_questionIds[$this->_position];\r\n            $this->_questionInstances[$this->_position] = new Question($id);\r\n        }\r\n        return $this->_questionInstances[$this->_position];\r\n    }\r\n}\r\n</pre>\r\n\r\n<p>Now your collection is ready to go, so long as you provide it with an array of IDs to work with. You can use foreach() on this container and only with each iteration will a Question object be instantiated.</p>\r\n<h3>Room for Improvement?</h3>\r\n<p>Depending on your circumstances you may need to be able to count the items in your container. To do this, simply implement the Countable interface and add a count() method:</p>\r\n<pre class=\"brush:php\">\r\nclass QuestionsContainer implements Iterator, Countable\r\n{\r\n    /* ... */\r\n    public function count()\r\n    {\r\n        return count($this->_questionIds);\r\n    }\r\n}\r\n</pre>\r\n<p><strong>Note:</strong> Be sure to count the number of IDs, not the number of instances, or else you may end up with a smaller count than expected!</p>\r\n<p>One of the benefits of using a lazy-loading iterator is that you can easily paginate through thousands of results and only show 10 or 20 at time.</p>\r\n<h3>Any Drawbacks or Limitations?</h3>\r\n<p>There are a few drawbacks to using this pattern over a traditional array, but depending on your use the strengths may easily outweigh the weaknesses. The weakness I've noticed are:</p>\r\n<ul>\r\n<li>Since the container object is not a true array, it's array capabilities are limited. For example, you cannot perform an array_merge() on this container, but you can implement your own method that merges in another array (or even another container).</li>\r\n<li>This pattern is susceptible to the N+1 problem, where the number of queries is equal to the number of items plus one. However, usually the queries required for the instantiation of a Question object are minimal.</li>\r\n</ul>\r\n<p>In my next post, I will show you how you can combine these ideas with the Data Mapper pattern to keep your business logic and persistence logic separated.</p>"
  status: "published"
  created: "2009-09-08 21:15:10"
  published: "2009-09-08 21:15:10"
-
  id: 8
  user_id: 1
  title: "Lazy Loading Resources in PHP"
  url: "lazy-loading-resources-in-php"
  description: "<p>Lazy loading is a great tool to keep applications running quickly.</p>"
  content: "<p>In most PHP applications it is common to have several resources. The database connection, the user session, the server-side cache object and helper classes are eventually used in parts of the application. But often times, certain pages do not need all of the resources. In this tutorial, I'll show you how to use lazy loading to create the resources only when you need them.</p>\r\n\r\n<h3>What is Lazy Loading?</h3>\r\n<p>Lazy loading is based on the concept that your resources should only be created when needed, and re-used if needed more than once. It's fairly straight-forward to implement and can also help with unit tests (more on this later).\r\n\r\n</p><h3>How Lazy Loading Works</h3>\r\n<p>Lazy loading works best in object-oriented code, so we'll begin with a class. Let's say we're building a simple database connection class and want to lazy load the actual connection. A typical class might look like this:</p>\r\n<pre class=\"brush:php\">\r\n&lt;?php\r\n\r\nclass DbConnection\r\n{\r\n    protected $_connection;\r\n\r\n    public function __construct($dsn, $username = null, $password = null, array $options = array())\r\n    {\r\n        $this->_connection = new Pdo($dsn, $username, $password, $options);\r\n    }\r\n\r\n    public function getConnection()\r\n    {\r\n        return $this->_connection;\r\n    }\r\n}\r\n</pre>\r\n<p>As you can see, the connection to the database is made immediately when the DbConnection class is instantiated. Normally this type of object is created in the application's bootstrap so that all pages will have access to a database connection.</p>\r\n<p>But what happens when you have a page that doesn't need a database connection? That resource is now wasted CPU cycles. How can this be improved by lazy loading?</p>\r\n<p>Simple -- just move the connection code into the getConnection() method. You can then test if the connection has already been made and, if not, create a new one. Keep in mind that you'll also need to store the constructor arguments so that they are available when you need to make the connection.</p>\r\n<pre class=\"brush:php\">\r\n&lt;?php\r\n\r\nclass DbConnection\r\n{\r\n    protected $_connection;\r\n    protected $_dsn;\r\n    protected $_username;\r\n    protected $_password;\r\n    protected $_options = array();\r\n\r\n    public function __construct($dsn, $username = null, $password = null, array $options = array())\r\n    {\r\n        $this->_dsn = $dsn;\r\n        $this->_username = $username;\r\n        $this->_password = $password;\r\n        $this->_options = $options;\r\n    }\r\n\r\n    public function getConnection()\r\n    {\r\n        if (null === $this->_connection) {\r\n            $this->_connection = new Pdo($this->_dsn, $this->_username, $this->_password, $this->_options);\r\n        }\r\n        return $this->_connection;\r\n    }\r\n}\r\n</pre>\r\n\r\n<p>Now your database connection won't be opened until you call DbConnection::getConnection(). This can help improve overall application performance if many of your pages do not require a database connection.</p>\r\n\r\n<h3>Unit Testing with Lazy Loading</h3>\r\n<p>Lazy loading compliments unit-testing because you can stub in a mock connection before calling DbConnection::getConnection(), allowing you to test your application without the need of a real database connection.</p>\r\n<p>This is as simple as adding a setConnection() method:</p>\r\n\r\n<pre class=\"brush:php\">\r\n&lt;?php\r\n\r\nclass DbConnection\r\n{\r\n    /* ... */\r\n    public function setConnection(Pdo $connection)\r\n    {\r\n        $this->_connection = $connection;\r\n    }\r\n}\r\n</pre>\r\n<h3>What else is Lazy Loading good for?</h3>\r\n<p>Lazy loading isn't just for database connections. Virtually any resource can be lazy-loaded to help improve performance. For example, I use lazy loading often in my Zend Framework applications to load things like forms, table classes, and service layers.</p>\r\n<p>The way I see it, there's no need to load a service if it's not going to be used, and there's no need to load the same service more than once when the same instance will do.</p>"
  status: "published"
  created: "2009-08-19 21:16:40"
  published: "2009-08-19 21:16:40"
-
  id: 9
  user_id: 1
  title: "Zend_Db_Table Enhancements"
  url: "zend-db-table-enhancements"
  description: "<p>Add Modified-Preorder-Tree-Traversal support to your tables with ease.</p>"
  content: "<p>The <a href=\"http://framework.zend.com/\">Zend Framework</a>'s <a href=\"http://framework.zend.com/manual/en/zend.db.table.html\">Zend_Db_Table</a> class offers plenty of features to make working with tables a breeze in PHP. You can easily insert, update, and delete rows, along with build complex select queries with <a href=\"http://framework.zend.com/manual/en/zend.db.table.html#zend.db.table.fetch-all\">Zend_Db_Table_Select</a>.</p> \r\n<p>I have subclassed Zend_Db_Table_Abstract to add my own commonly-used features, like preInsert() and preUpdate() methods, and automated support for tables using the <a href=\"http://www.sitepoint.com/print/hierarchical-data-database/\">Modified Preorder Tree Traversal</a> algorithm.</p> \r\n<h4>Modified&nbsp;Preorder Tree&nbsp;Traversal</h4> \r\n<p>To use the modified preorder tree traversal algorithm in your table, you will initially have to do just a little bit of work but once it is set up everything should be automated for you.</p> \r\n<p>First, you will need to create your table in MySQL&nbsp;and add two columns for the &quot;left&quot;&nbsp;and &quot;right&quot;&nbsp;values. Let's create a comments table as an example. Since &quot;left&quot;&nbsp;and &quot;right&quot;&nbsp;are reserved words in SQL, let's name these columns &quot;lt&quot; and &quot;rt&quot;, but you can name them whatever you choose. You will also need to add a &quot;parent_id&quot; column, which references this same table's &quot;id&quot;&nbsp;column.</p> \r\n<pre class=\"brush:sql\"> \r\nCREATE TABLE `comments` (\r\n  `id` bigint(20) unsigned NOT NULL auto_increment,\r\n  `parent_id` bigint(20) unsigned default NULL,\r\n  `name` varchar(255) NOT NULL,\r\n  `subject` varchar(255) NOT NULL,\r\n  `comment` text NOT NULL,\r\n  `created` timestamp NOT NULL default CURRENT_TIMESTAMP,\r\n  `modified` datetime default NULL,\r\n  `lt` bigint(20) unsigned NOT NULL,\r\n  `rt` bigint(20) unsigned NOT NULL,\r\n  PRIMARY KEY  (`id`),\r\n  KEY `parent_id` (`parent_id`),\r\n  KEY `lt` (`lt`,`rt`),\r\n  KEY `rt` (`rt`)\r\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8;</pre> \r\n<p>Next, you will need to create your table class by extending Virgen_Db_Table, and declare the traversal properties.</p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\nclass Model_Comments extends Virgen_Db_Table\r\n{\r\n    protected $_name = 'comments';\r\n    \r\n    protected $_traversal = array(\r\n        'left'          => 'lt',\r\n        'right'         => 'rt',\r\n        'column'        => 'id',\r\n        'refColumn'     => 'parent_id'\r\n    );\r\n}</pre> \r\n<p>That's it!&nbsp;Now when you insert a new record, the &quot;lt&quot;&nbsp;and &quot;rt&quot;&nbsp;columns will be updated as necessary to reflect the new preorder tree.</p> \r\n<p>If you already have data in your table or want to rebuild the entire tree, you can use the rebuildTreeTraversal()&nbsp;method. Please note on large tables, this may take some time to complete.</p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\n$comments = new Model_Comments();\r\n$comments->rebuildTreeTraversal();\r\n</pre> \r\n<h4>Fetching Descendents of a Given Node</h4> \r\n<p>Once your tree is built, you can fetch all descendents of a node with fetchAllDescendents(). The first argument is the node to fetch the descendents of. The node can be either an instance of Zend_Db_Table_Row_Abstract or the string/numeric value of the columns id (based on $_traversal['column']). You can optionally pass in a select object to use as the second argument, which will be used when selecting the descendents.</p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\n$node = $comments->find(17)->current();\r\n$descendents = $comments->fetchAllDescendents($node);\r\n// Identical to:\r\n$descendents = $comments->fetchAllDescendents(17);\r\n\r\n// With optional select object\r\n$select = $comments->select()->where('name = ?', 'jennifer')->limit(5);\r\n$descendends = $comments->fetchAllDescendents($node, $select);\r\n</pre> \r\n<h4>Fetching Ancestors of a Given Node</h4> \r\n<p>You can also fetch the ancestors just as easily with fetchAllAncestors(). All ancestors from the immediate parent up to the root of the tree will be returned.</p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\n$ancestors = $comments->fetchAllAncestors($node);\r\n</pre> \r\n<h4>Fetching Nodes as a Tree</h4> \r\n<p>You can fetch nodes as a tree by calling <code>$table->fetchTree()</code>. Its functionality is similar to fetchDescendents, except that it returns a modified rowset in that each row contains a <code>tree_depth</code> value.</p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\n$tree = $comments->fetchTree();\r\n \r\nforeach ($tree as $node)&nbsp;{\r\n    echo str_repeat(' ', $node->tree_depth *&nbsp;4) . $node->id . PHP_EOL;\r\n}\r\n</pre> \r\n<h4>Class: Virgen_Db_Table</h4> \r\n<p>Here's the complete Virgen_Db_Table class:</p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\n/**\r\n * Enhancements to Zend_Db_Table\r\n * @author Hector Virgen\r\n * \r\n */\r\nrequire_once 'Zend/Db/Table/Abstract.php';\r\n \r\nclass Virgen_Db_Table extends Zend_Db_Table_Abstract\r\n{\r\n    /**\r\n     * Traversal tree information for\r\n     * Modified Preorder Tree Traversal Model\r\n     * \r\n     * http://www.sitepoint.com/print/hierarchical-data-database\r\n     * \r\n     * Values:\r\n     *  'left'          => column name for left value\r\n     *  'right'         => column name for right value\r\n     *  'column'        => column name for identifying row (primary key assumed)\r\n     *  'refColumn'     => column name for parent id (if not set, will look in reference map for own table match)\r\n     *  'order'         => order by for rebuilding tree (e.g. &quot;`name` ASC, `age` DESC&quot;)\r\n     *\r\n     * @var array $_traversal\r\n     */\r\n    protected $_traversal = array();\r\n    \r\n    /**\r\n     * Automatically is set to true once traversal info is set and verified\r\n     *\r\n     * @var boolean $_isTraversable\r\n     */\r\n    protected $_isTraversable = false;\r\n    \r\n    /**\r\n     * Modified to initialize traversal\r\n     *\r\n     */\r\n    public function __construct($config = array())\r\n    {\r\n        parent::__construct($config);\r\n        $this->_initTraversal();\r\n    }\r\n    \r\n    /**\r\n     * Returns columns names\r\n     *\r\n     * @return array columns\r\n     */\r\n    public function getColumns()\r\n    {\r\n        return $this->info(Zend_Db_Table_Abstract::COLS);\r\n    }\r\n    \r\n    /**\r\n     * Returns metadata value for index or entire array\r\n     *\r\n     * @param index $key\r\n     * @return value | array\r\n     */\r\n    public function getMetadata($key = null)\r\n    {\r\n        if (null === $key) return $this->_metadata;\r\n        if (!array_key_exists($key, $this->_metadata)) {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Key '{$key}' not found in metadata&quot;);\r\n        }\r\n        return $this->_metadata[$key];\r\n    }\r\n    \r\n    /**\r\n     * Returns the table name and schema separated by a dot for use in sql queries\r\n     *\r\n     * @return string schema.name || name\r\n     */\r\n    public function getName()\r\n    {\r\n        return $this->_schema ? $this->_schema . '.' . $this->_name : $this->_name;\r\n    }\r\n    \r\n    /**\r\n     * Is Duplicate - Checks for a duplicate value in the database\r\n     *\r\n     * @param string $column - column name\r\n     * @param string $value - value to search for\r\n     * @return boolean\r\n     */\r\n    public function isDuplicate($column, $match)\r\n    {\r\n        $select = $this->select()->limit(1);\r\n        \r\n        if (is_string($match) OR is_numeric($match)) {\r\n            $select->where(&quot;{$column} = ?&quot;, $match);\r\n        } else if (is_array($match)) {\r\n            $select->where(&quot;{$column} IN (?)&quot;, $match);\r\n        } else {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Match value must be a string, numeric, or array&quot;);\r\n        }\r\n        \r\n        return (null !== $this->fetchRow($select)) ? true : false;\r\n    }\r\n    \r\n    /**\r\n     * Fetches duplicate entries based on column name\r\n     *\r\n     * @param string $column - column name\r\n     * @param string $match - optional match value\r\n     * @return Zend_Db_Table_Rowset\r\n     */\r\n    public function fetchDuplicates($column, $match = null)\r\n    {\r\n        $select = $this->select()\r\n        ->from(\r\n            $this->getName(), \r\n            array(\r\n                'value'         => $column, \r\n                'duplicates'    => new Zend_Db_Expr('COUNT(*)')\r\n            )\r\n        )\r\n        ->group($column)\r\n        ->having('duplicates > ?', 1)\r\n        ;\r\n        \r\n        if (is_string($match) OR is_numeric($match)) {\r\n            $select->where(&quot;{$column} = ?&quot;, $match);\r\n        } else if (is_array($match)) {\r\n            $select->where(&quot;{$column} IN (?)&quot;, $match);\r\n        }\r\n        \r\n        return $this->fetchAll($select);\r\n    }\r\n    \r\n    /**\r\n     * Is Valid - Checks if a field is valid based on its validator\r\n     *\r\n     * @param string $field\r\n     * @param string|int $value\r\n     * @return boolean\r\n     */\r\n    public function isValid($field, $value)\r\n    {\r\n        if (!array_key_exists($field, $this->_validators)) return true;\r\n        \r\n        foreach($this->_validators[$field] as $validator) {\r\n            if (!array_key_exists('name', $validator)) {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Validators must contain a name.&quot;);\r\n            }\r\n            $name = $validator['name'];\r\n            $arguments = array_key_exists('arguments', $validator) ? $validator['arguments'] : array();\r\n            if (!Zend_Validate::is($value, $name, $arguments)) {\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Counts the number of rows for a given select statement.\r\n     * Accepts instances of Zend_Db_Table_Select, Zend_Db_Select,\r\n     * an array of WHERE clauses, or null to return a total\r\n     * count of all rows in the table.\r\n     *\r\n     * @param Zend_Db_Table_Select|string|array $select\r\n     * @return int theCount\r\n     */\r\n    public function count($select = null)\r\n    {\r\n        // Count using instance of Zend_Db_Table_Select\r\n        if ($select instanceof Zend_Db_Table_Select) {\r\n            $_select = clone $select;\r\n            $result = $this->_countSelect($_select);\r\n            \r\n        // Count using array or count all\r\n        } else if(null === $select OR is_string($select) OR is_array($select)) {\r\n            $result = $this->_countWhere($select);\r\n \r\n        // Invalid parameter\r\n        } else {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception('Invalid parameter passed to count() method');\r\n        }\r\n        \r\n        return $result;\r\n    }\r\n    \r\n    /**\r\n     * Counts the number of rows using an instance of \r\n     * Zend_Db_Table_Select.\r\n     *\r\n     * @param Zend_Db_Table_Select $select\r\n     * @return double theCount\r\n     */\r\n    protected function _countSelect(Zend_Db_Table_Select $select)\r\n    {\r\n        $s = clone $select;\r\n        \r\n        // Remove any existing limits, offsets, and orders\r\n        $s->reset('order');\r\n        $s->reset('limitcount');\r\n        $s->reset('limitoffset');\r\n        \r\n        \r\n        $_select = $this->getAdapter()\r\n        ->select()\r\n        ->from(\r\n            array('c' => $s),\r\n            array('theCount' => 'COUNT(*)')\r\n        )\r\n        ;\r\n        \r\n        $row = $this->getAdapter()->fetchRow($_select);\r\n        \r\n        return (double) $row['theCount'];\r\n    }\r\n    \r\n    /**\r\n     * Counts the number of rows using an array or string\r\n     * of where clauses, or null to count all rows in the \r\n     * table.\r\n     *\r\n     * @param array|string $where\r\n     * @return double theCount\r\n     */\r\n    protected function _countWhere($where = null)\r\n    {\r\n        $select = $this->select();\r\n        if (is_array($where)) {\r\n            foreach ($where as $key => $value) {\r\n                if (is_int($key)) {\r\n                    $select->where($value);\r\n                } else {\r\n                    $select->where($key, $value);\r\n                }\r\n            }\r\n        } else if (is_string($where)) {\r\n            $select->where($where);\r\n        }\r\n        \r\n        return (double) $this->_countSelect($select);\r\n    }\r\n    \r\n    /**\r\n     * Returns the number of rows from the last SQL_CALC_FOUND_ROWS query\r\n     *\r\n     * @return double - found rows\r\n     */\r\n    public function getCalcFoundRows()\r\n    {\r\n        $sql = &quot;SELECT FOUND_ROWS() AS theCount&quot;;\r\n        $stmt = $this->_db->query($sql);\r\n        $row = $stmt->fetch();\r\n        \r\n        return (double) $row['theCount'];\r\n    }\r\n    \r\n    /**\r\n     * Pre-insert hook allows for data validation / filtering on a per-class basis\r\n     *\r\n     * @param array $data\r\n     * @return array\r\n     */\r\n    public function preInsert($data)\r\n    {\r\n        return $data;\r\n    }\r\n    \r\n    /**\r\n     * Pre-update hook allows for data validation / filtering on a per-class basis\r\n     *\r\n     * @param array $data\r\n     * @return array\r\n     */\r\n    public function preUpdate($data)\r\n    {\r\n        return $data;\r\n    }\r\n    \r\n    /**\r\n     * Override insert method to include pre-insert hook\r\n     *\r\n     * @param mixed $data\r\n     * @return primary key\r\n     */\r\n    public function insert(array $data)\r\n    {\r\n        $data = $this->preInsert($data);\r\n        \r\n        return $this->_isTraversable ? $this->_insertTraversable($data) : parent::insert($data);\r\n    }\r\n    \r\n    /**\r\n     * Override update method to include pre-update hook\r\n     *\r\n     * @param mixed $data\r\n     * @param mixed $where\r\n     * @return int\r\n     */\r\n    public function update(array $data, $where)\r\n    {\r\n        $data = $this->preUpdate($data);\r\n        \r\n        return parent::update($data, $where);\r\n    }\r\n    \r\n    /**\r\n     * Factory method to return instances of reference tables\r\n     *\r\n     * @param string $name\r\n     * @param array $options for constructor\r\n     * @return Virgen_Db_Table $instance\r\n     */\r\n    public function getReferenceInstance($ruleKey, array $options = array())\r\n    {\r\n        if (!array_key_exists($ruleKey, $this->_referenceMap)) {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Reference key {$ruleKey} not found in &quot; . __CLASS__);\r\n        }\r\n        \r\n        $className = $this->_referenceMap[$ruleKey]['refTableClass'];\r\n        \r\n        // Check for self-references\r\n        if (!array_key_exists($className, self::$_referenceInstances)) {\r\n            self::$_referenceInstances[$className] = ($className == __CLASS__) ?\r\n                $this:\r\n                new $className($options);\r\n        }\r\n        \r\n        return self::$_referenceInstances[$className];\r\n    }\r\n    \r\n    /**\r\n     * Factory method to return instances of dependent tables\r\n     *\r\n     * @param string $name - class name of dependent table\r\n     * @param array $options - options to pass to constructor\r\n     * @return Virgen_Db_Table $instance\r\n     */\r\n    public function getDependentInstance($className, array $options = array())\r\n    {\r\n        if (!in_array($className, $this->_dependentTables)) {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Dependent table {$className} not found in &quot; . __CLASS__);\r\n        }\r\n        \r\n        if (!array_key_exists($className, self::$_dependentInstances)) {\r\n            self::$_dependentInstances[$className] = ($className == __CLASS__) ?\r\n                $this:\r\n                new $className($options);\r\n        }\r\n        \r\n        return self::$_dependentInstances[$className];\r\n    }\r\n    \r\n    /**\r\n     * Returns all reference instances\r\n     *\r\n     * @return array - reference instances\r\n     */\r\n    public function getReferenceInstances()\r\n    {\r\n        return self::$_dependentInstances;\r\n    }\r\n    \r\n    /**\r\n     * Returns all dependent instances\r\n     *\r\n     * @return array - dependent instances\r\n     */\r\n    public function getDependentInstances()\r\n    {\r\n        return self::$_dependentInstances;\r\n    }\r\n    \r\n    /**\r\n     * Public function to rebuild tree traversal. The recursive function\r\n     * _rebuildTreeTraversal() must be called without arguments.\r\n     *\r\n     * @return $this - Fluent interface\r\n     */\r\n    public function rebuildTreeTraversal()\r\n    {\r\n        $this->_rebuildTreeTraversal();\r\n        \r\n        return $this;\r\n    }\r\n    \r\n    /**\r\n     * Recursively rebuilds the modified preorder tree traversal\r\n     * data based on a parent id column\r\n     *\r\n     * @param int $parentId\r\n     * @param int $leftValue\r\n     * @return int new right value\r\n     */\r\n    protected function _rebuildTreeTraversal($parentId = null, $leftValue = 0)\r\n    {\r\n        $this->_verifyTraversable();\r\n        \r\n        $select = $this->select();\r\n        \r\n        if ($parentId >&nbsp;0) {\r\n            $select->where(&quot;{$this->_traversal['refColumn']} = ?&quot;, $parentId);\r\n        } else {\r\n            $select->where(&quot;{$this->_traversal['refColumn']} IS NULL OR {$this->_traversal['refColumn']} = 0&quot;);\r\n        }\r\n        \r\n        if (array_key_exists('order', $this->_traversal)) {\r\n            $select->order($this->_traversal['order']);\r\n        }\r\n        \r\n        $rightValue = $leftValue + 1;\r\n        \r\n        $rowset = $this->fetchAll($select);\r\n        foreach ($rowset as $row) {\r\n            $rightValue = $this->_rebuildTreeTraversal($row->{$this->_traversal['column']}, $rightValue);\r\n        }\r\n        \r\n        if ($parentId >&nbsp;0) {\r\n            $node = $this->fetchRow($this->select()->where(&quot;{$this->_traversal['column']} = ?&quot;, $parentId));\r\n            if (null !== $node) {\r\n                $node->{$this->_traversal['left']} = $leftValue;\r\n                $node->{$this->_traversal['right']} = $rightValue;\r\n                $node->save();\r\n            }\r\n        }\r\n        \r\n        return $rightValue + 1;\r\n    }\r\n    \r\n    /**\r\n     * Calculates left and right values for new row and inserts it.\r\n     * Also adjusts all rows to make room for the new row.\r\n     *\r\n     * @param array $data\r\n     * @return int $id\r\n     */\r\n    protected function _insertTraversable($data)\r\n    {\r\n        $this->_verifyTraversable();\r\n        \r\n        // Disable traversable flag to prevent automatic traversable manipulation during updates.\r\n        $isTraversable = $this->_isTraversable;\r\n        $this->_isTraversable = false;\r\n        \r\n        if (array_key_exists($this->_traversal['refColumn'], $data) && $data[$this->_traversal['refColumn']] > 0) {\r\n            // Find parent row\r\n            $parent_id = $data[$this->_traversal['refColumn']];\r\n            $parent = $this->find($parent_id)->current();\r\n            if (null === $parent) {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Traversable error: Parent id {$parent_id} not found&quot;);\r\n            }\r\n            \r\n            $lt = (double) $parent->{$this->_traversal['left']};\r\n            $rt = (double) $parent->{$this->_traversal['right']};\r\n            \r\n            // Make room for the new node\r\n            parent::update(\r\n                array(\r\n                    $this->_traversal['left'] => new Zend_Db_Expr($this->getAdapter()->quoteInto(&quot;{$this->_traversal['left']} + ?&quot;, 2)),\r\n                ),\r\n                array(\r\n                    $this->getAdapter()->quoteInto(&quot;{$this->_traversal['left'] > ?&quot;, $lt)\r\n                )\r\n            );\r\n            \r\n            parent::update(\r\n                array(\r\n                    $this->_traversal['right'] => new Zend_Db_Expr($this->getAdapter()->quoteInto(&quot;{$this->_traversal['right']} + ?&quot;, 2)),\r\n                ),\r\n                array(\r\n                    $this->getAdapter()->quoteInto(&quot;{$this->_traversal['right']} > ?&quot;, $lt)\r\n                )\r\n            );\r\n            \r\n            $data[$this->_traversal['left']] = $lt + 1;\r\n            $data[$this->_traversal['right']] = $lt + 2;\r\n        } else {\r\n            $maxRt = (double) $this->fetchRow($this->select()->from($this, array('theMax' => &quot;MAX({$this->_traversal['right']})&quot;)))->theMax;\r\n            $data[$this->_traversal['left']] = $maxRt + 1;\r\n            $data[$this->_traversal['right']] = $maxRt + 2;\r\n        }\r\n        \r\n        // Do insert\r\n        $id = $this->insert($data);\r\n        \r\n        // Reset isTraversable flag to previous value.\r\n        $this->_isTraversable = $isTraversable;\r\n        \r\n        return $id;\r\n    }\r\n    \r\n    /**\r\n     * Fetches all descendents of a given node\r\n     *\r\n     * @param Zend_Db_Table_Row_Abstract|string $row - Row object or value of row id\r\n     * @param Zend_Db_Select $select - optional custom select object\r\n     * @return Zend_Db_Table_Rowset|null\r\n     */\r\n    public function fetchAllDescendents($row, Zend_Db_Select $select = null)\r\n    {\r\n        $this->_verifyTraversable();\r\n                \r\n        if ($row instanceof Zend_Db_Table_Row_Abstract) {\r\n            $_row = $row;\r\n        } else if (is_string($row) OR is_numeric($row)) {\r\n            $_row = $this->fetchRow($this->select()->where($this->_traversal['column'] . ' = ?', $row));\r\n            if (null === $_row) {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Cannot find row '{$this->_traversal['column']}' = {$row}&quot;);\r\n            }\r\n        } else {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Expecting instance of Zend_Db_Table_Row_Abstract, a string, or numeric&quot;);\r\n        }\r\n        \r\n        $left = $_row->{$this->_traversal['left']};\r\n        $right = $_row->{$this->_traversal['right']};\r\n        \r\n        if (null === $select) {\r\n            $select = $this->select();\r\n        }\r\n        \r\n        $select->where(&quot;{$this->_traversal['left']} > ?&quot;, (double) $left)\r\n        ->where(&quot;{$this->_traversal['left']} &lt; ?&quot;, (double) $right)\r\n        ;\r\n        \r\n        $orderPart = $select->getPart('order');\r\n        if (empty($orderPart)) $select->order($this->_traversal['left']);\r\n        \r\n        return $this->fetchAll($select);\r\n    }\r\n    \r\n    /**\r\n     * Fetches all descendents of a given node and returns them as a tree\r\n     *\r\n     * @param Zend_Db_Table_Row_Abstract|string|int $rows- Row object or value of row id or array of rows\r\n     * @param Zend_Db_Select $select - optional select object\r\n     * @return Zend_Db_Table_Rowset|null\r\n     */\r\n    public function fetchTree($row = null, Zend_Db_Select $select = null)\r\n    {\r\n        $this->_verifyTraversable();\r\n        \r\n        if (null === $select) {\r\n            $select = $this->select();\r\n        }\r\n        \r\n        $select->setIntegrityCheck(false)\r\n        ->from(array('node' => $this->getName()))\r\n        ->join(array('parent' => $this->getName()),\r\n            null,\r\n            array(\r\n                'tree_depth' => new Zend_Db_Expr(&quot;COUNT(parent.{$this->_traversal['refColumn']})&quot;)\r\n            )\r\n        )\r\n        ->group(&quot;node.{$this->_traversal['column']}&quot;)\r\n        ;\r\n        \r\n        if (null !== $row) {\r\n            if ($row instanceof Zend_Db_Table_Row_Abstract) {\r\n                $_row = $row;\r\n            } else if (is_string($row) OR is_numeric($row)) {\r\n                $_row = $this->fetchRow($this->select()->where($this->_traversal['column'] . ' = ?', $row));\r\n                if (null === $_row) {\r\n                    require_once 'Zend/Db/Table/Exception.php';\r\n                    throw new Zend_Db_Table_Exception(&quot;Cannot find row '{$this->_traversal['column']}' = {$row}&quot;);\r\n                }\r\n            } else {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Expecting instance of Zend_Db_Table_Row_Abstract, a string, or numeric&quot;);\r\n            }\r\n            \r\n            $left = (double) $_row->{$this->_traversal['left']};\r\n            $right = (double) $_row->{$this->_traversal['right']};\r\n            \r\n            if ($left > 0 AND $right > 0) {\r\n                $select->where(&quot;node.{$this->_traversal['left']} >= {$left} AND node.{$this->_traversal['left']} &lt; {$right}&quot;);\r\n            } else {\r\n                // Traversal information is bad, throw an exception\r\n                $id = $_row->{$this->_traversal['column']};\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Left/right values for row '{$this->_traversal['column']}' = '{$id}' in table '{$this->_name}' must be greater than zero to fetch tree.&quot;);\r\n            }\r\n        }\r\n        \r\n        $select->where(&quot;node.{$this->_traversal['left']} BETWEEN parent.{$this->_traversal['left']} AND parent.{$this->_traversal['right']}&quot;);\r\n        \r\n        $orderPart = $select->getPart('order');\r\n        if (empty($orderPart)) {\r\n            $select->order(&quot;node.{$this->_traversal['left']}&quot;);\r\n        }\r\n        \r\n        return $this->fetchAll($select);\r\n    }\r\n    \r\n    /**\r\n     * Fetches all ancestors of a given node\r\n     *\r\n     * @param Zend_Db_Table_Row_Abstract|string $row - Row object or value of row id\r\n     * @param Zend_Db_Select $select - optional custom select object\r\n     * @return Zend_Db_Table_Rowset|null\r\n     */\r\n    public function fetchAllAncestors($row, Zend_Db_Select $select = null)\r\n    {\r\n        $this->_verifyTraversable();\r\n        \r\n        if ($row instanceof Zend_Db_Table_Row_Abstract) {\r\n            $_row = $row;\r\n        } else if (is_string($row) OR is_numeric($row)) {\r\n            $_row = $this->fetchRow($this->select()->where($this->_traversal['column'] . ' = ?', $row));\r\n            if (null === $_row) {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Cannot find row '{$this->_traversal['column']}' = {$row}&quot;);\r\n            }\r\n        } else {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Expecting instance of Zend_Db_Table_Row_Abstract, a string, or numeric&quot;);\r\n        }\r\n        \r\n        $left = $_row->{$this->_traversal['left']};\r\n        $right = $_row->{$this->_traversal['left']};\r\n        \r\n        if (null === $select) {\r\n            $select = $this->select();\r\n        }\r\n        \r\n        $select->where(&quot;{$this->_traversal['left']} &lt; ?&quot;, (double) $left)\r\n        ->where(&quot;{$this->_traversal['right']} > ?&quot;, (double) $right)\r\n        ;\r\n \r\n        $orderPart = $select->getPart('order');\r\n        if (empty($orderPart)) {\r\n            $select->order($this->_traversal['left']);\r\n        }\r\n        \r\n        return $this->fetchAll($select);\r\n    }\r\n    \r\n    /**\r\n     * Prepares the traversal information\r\n     *\r\n     */\r\n    protected function _initTraversal()\r\n    {\r\n        if (empty($this->_traversal)) return;\r\n        \r\n        $columns = $this->getColumns();\r\n        \r\n        // Verify 'left' value and column\r\n        if (!isset($this->_traversal['left'])) {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;'left' value must be specified for tree traversal&quot;);\r\n        }\r\n        \r\n        if (!in_array($this->_traversal['left'], $columns)) {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Column '&quot; . $this->_traversal['left'] . &quot;' not found in table for tree traversal&quot;);\r\n        }\r\n        \r\n        // Verify 'right' value and column\r\n        if (!isset($this->_traversal['right'])) {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;'right' value must be specified for tree traversal&quot;);\r\n        }\r\n        \r\n        if (!in_array($this->_traversal['right'], $columns)) {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Column '&quot; . $this->_traversal['right'] . &quot;' not found in table for tree traversal&quot;);\r\n        }\r\n        \r\n        // Check for identifying column\r\n        if (!isset($this->_traversal['column'])) {\r\n            if (!isset($this->_primary)) {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Unable to determine primary key for tree traversal&quot;);\r\n            }\r\n            \r\n            if (count($this->_primary) > 1) {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Cannot use compound primary key as identifying column for tree traversal, please specify the column manually&quot;);\r\n            }\r\n            \r\n            $this->_traversal['column'] = current((array) $this->_primary);\r\n        }\r\n        \r\n        // Check for reference column\r\n        if (!isset($this->_traversal['refColumn'])) {\r\n            if (!array_key_exists('Parent', $this->_referenceMap)) {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Unable to determine reference column for traversal, and did not find reference rule 'Parent' in reference map&quot;);\r\n            }\r\n            \r\n            $refColumn = $this->_referenceMap['Parent']['refColumns'];\r\n            if (!is_string($refColumn) AND count($refColumn) > 1) {\r\n                require_once 'Zend/Db/Table/Exception.php';\r\n                throw new Zend_Db_Table_Exception(&quot;Cannot use compound primary key as reference column for tree traversal, please specify the reference column manually&quot;);\r\n            }\r\n            \r\n            $this->_traversal['refColumn'] = $refColumn;\r\n        }\r\n        \r\n        $this->_isTraversable = true;\r\n    }\r\n    \r\n    /**\r\n     * Verifies that the current table is a traversable\r\n     * \r\n     * @throws Zend_Db_Exception - Table is not traversable\r\n     */\r\n    protected function _verifyTraversable()\r\n    {\r\n        if (!$this->_isTraversable) {\r\n            require_once 'Zend/Db/Table/Exception.php';\r\n            throw new Zend_Db_Table_Exception(&quot;Table {$this->_name} is not traversable&quot;);\r\n        }\r\n    }\r\n}\r\n</pre>"
  status: "published"
  created: "2009-07-23 21:18:28"
  published: "2009-07-23 21:18:28"
-
  id: 10
  user_id: 1
  title: "Invisible Buttons are a Bad Idea"
  url: "invisible-buttons-are-a-bad-idea"
  description: "<p>One of my pet peeve's are buttons that you can't see.</p>"
  content: "<p>Good user-interface design involves a lot of factors including clear responsive feedback. A good example of this is making a hyperlink brighter when the cursor is placed over it. This also works well for any \"clickable\" object like form buttons, images, tabs, etc.</p>\r\n\r\n<p>One thing I've been seeing a lot lately is invisible buttons -- they remain invisible until the cursor approaches the button, which reveals the button so it can be clicked.</p>\r\n\r\n<p>While this may help make things look tidy in screenshots, it can quickly become problematic to the user.</p>\r\n\r\n<p>According to The essential guide to user interface design By Wilbert O. Galitz (ISBN: 0470053429, 9780470053423), '&quot;Invisible&quot; buttons must never exist'.</p>\r\n\r\n<p>The biggest problem with invisible buttons is that they are invisible. How would know the buttons are there if you can't see them? What if the button does something destructive, like delete a file or close a window? Now a seemingly safe place to click is a hotspot for unintentional and sometimes unrecoverable damage.</p>\r\n\r\n<p>I recently downloaded Apple Safari 4 for PC, and started browsing and opening tabs. The browser itself is great -- quick, responsive, snappy. Each tab, however, has an invisible close button on the right side of each tab. The button remains invisible until your mouse cursor is placed directly on the tab. Once the cursor is &quot;within range&quot;, the close button appears.</p>\r\n\r\n<p>When you need to quickly switch tabs using the mouse, it becomes dangerously easy to close the tab instead of switching to it. If you're a very fast clicker, it's possible to accidentally close the tab without even seeing the close button appear, especially when approaching the tab from the bottom, top, or right side of the tab. Your tab just now disappeared when trying to switch to it. Additionally, if there were a tab to the right, it will be pushed over to the left in place of tab that you just unknowningly closed, causing even more confusion.</p>\r\n\r\n<p>A viable and aesthetic alternative would be to make the buttons less noticeable until the user places the cursor over the actual button itself. Less noticeable does not mean invisible or near-invisible, just let it blend more naturally as to not be too distracting. Once the cursor is over the button, it can glow or change colors to indicate that clicking the mouse will cause something to happen.</p>\r\n\r\n<p>Google Chrome does a great job of this by making the close buttons appear as little gray x's on the tabs. The x's are always visible so you always know they are there. When the mouse is directly over the x it becomes a red circle with a white x within it, indicating that something &quot;destructive&quot; will happen if you click at that moment. This helps make it very obvious that if you're going to quickly target the tab with your mouse to select it that you should aim for the middle or left side of the tab.</p>"
  status: "published"
  created: "2009-06-25 21:20:03"
  published: "2009-06-25 21:20:03"
-
  id: 11
  user_id: 1
  title: "\"Percent\" View Helper for the Zend Framework"
  url: "percent-view-helper-for-zend-framework"
  description: "<p>Easily display percentages using this view helper for the Zend Framework.</p>"
  content: "<p>Lately I've been working on a very data-intensive website where things like averages and percentages are very common. While it is pretty simple to display an average, the &quot;percent&quot;&nbsp;format is a little awkward to display easily. Usually, a percent value is calculated within the SQL&nbsp;query and displayed in the view.</p> \r\n<pre class=\"brush:sql\"> \r\nSELECT      id,\r\n            name,\r\n            CONCAT(score / max_score * 100, '%', 3) as percent\r\nFROM        my_table\r\nWHERE       id = 123;\r\n</pre> \r\n<p>However, I consider &quot;percent&quot; to be a display format, and asking the database to render a &quot;for display&quot; value can lead to design issues in the future.</p> \r\n<p>For example, let's say your client wants to display the score alongside the percent value. Simple enough, just modify your SQL query right? But doing so would mean that a programmer would have be making simple design changes... is there a better way?</p> \r\n<p>One solution would be to fetch the raw values and calculate them in PHP within the view script:</p> \r\n<pre class=\"brush:php\"> \r\n# controller\r\n$this-view-&gt;exam = $myTable-&gt;find(123)-&gt;current();\r\n</pre>\r\n<pre class=\"brush:php; html-script: true;\">\r\n# view\r\n&lt;?= number_format($this-&gt;exam-&gt;score / $this-&gt;exam-&gt;max_score * 100, 3) ?&gt;%\r\n</pre> \r\n<p>While that may seem like a pretty simple bit of code, it can be quite tedious to have to write out that formula each time you need a percent value. Additionally, percents like 92.5% would be displayed as 92.500% due to how number_format treats trailing zeroes. To remove trailing zeroes and the possible trailing dot, you must wrap the <code>number_format()</code> function above in <em>two</em> <code>rtrim()</code>&nbsp;functions.</p> \r\n<pre class=\"brush:php; html-script: true;\"> \r\n&lt;?= rtrim(rtrim(number_format($this-&gt;exam-&gt;score / $this-&gt;exam-&gt;max_score *&nbsp;100, 3), '0'), '.') ?&gt;%</pre> \r\n<p>As you can see, this is starting to look pretty ugly.</p> \r\n<p>That's where the Zend Framework's view helpers come in. They are perfect for these types of things.</p> \r\n<h4>Usage</h4> \r\n<p>Usage is pretty straightforward. Just pass in an array of values representing the <code>score</code> and <code>max_score</code> values, and an optional integer for the number of digits to keep after the dot.</p> \r\n<pre class=\"brush:php; html-script: true;\"> \r\n&lt;?= $this-&gt;percent(array($this-&gt;exam-&gt;score, $this-&gt;exam-&gt;max_score), 3) ?&gt;\r\n</pre> \r\n<p>That's it! The view helper automatically handles the calculations for you, trims off any trailing zeroes, and appends a '%' to the end.</p> \r\n<p>The output for the code above would look like <code>92.5%</code>.</p> \r\n<p>In the event that you already have a percent value (perhaps from a precalculated database field) and just need to have it formatted, pass in the percent value instead of an array. The view helper will detect that it's numeric and just do the trimming and toss a percent sign at the end.</p> \r\n<p>To create percentages in other locales, you can assign your own characters to use for the percent sign, thousands separator, and decimal separator.</p> \r\n<pre class=\"brush:php\"> \r\n&lt;?= $this-&gt;percent()\r\n    -&gt;setPercentSymbol('#')\r\n    -&gt;setThousandsSeparator('.')\r\n    -&gt;setDecimalSeparator(',')\r\n    -&gt;percent(array($this-&gt;exam-&gt;score, $this-&gt;exam-&gt;max_score), 3)&nbsp;?&gt;\r\n</pre> \r\n<p>The output for the above would look like <code>92,5#</code>.</p> \r\n<p>Here's the complete Percent view helper for the Zend Framework.</p> \r\n<h4>Virgen_View_Helper_Percent</h4> \r\n<pre class=\"brush:php;\"> \r\n&lt;?php\r\n \r\n/**\r\n * Formats a number to pretty percent notation.\r\n * Accepts an array of numbers to calculate on-the-fly\r\n * \r\n * @author Hector Virgen\r\n */\r\nclass Virgen_View_Helper_Percent\r\n{\r\n    /**\r\n     * Flag to enable/disable trimming of trailing zeroes and dot\r\n     *\r\n     * @var boolean\r\n     */\r\n    protected $_trimTrail = true;\r\n    \r\n    /**\r\n     * Percent symbol to append to formatted number\r\n     *\r\n     * @var string\r\n     */\r\n    protected $_symbol = '%';\r\n    \r\n    /**\r\n     * Character to use as thousands separator\r\n     *\r\n     * @var string\r\n     */\r\n    protected $_thousandsSep = ',';\r\n    \r\n    /**\r\n     * Character to use as decimal point\r\n     *\r\n     * @var string\r\n     */\r\n    protected $_decPoint = '.';\r\n    \r\n    /**\r\n     * Formats a number or array of numbers to percent notation\r\n     *\r\n     * @param numeric|array $data - Percent value or array of numbers to calculate percent\r\n     * @param int $digits - Number of digits to display after the dot\r\n     * @return string - Formatted percent\r\n     */\r\n    public function percent($data = null, $digits = 0)\r\n    {\r\n        // Return this if no parameters were passed\r\n        if (null === $data) {\r\n            return $this;\r\n        }\r\n        \r\n        // Determine percent value\r\n        if (is_array($data)) {\r\n            list($val, $maxval) = $data;\r\n            $percent = $this-&gt;calcPercent($val, $maxval);\r\n        } else if (is_numeric($data)) {\r\n            $percent = (float) $data;\r\n        } else {\r\n            throw new Zend_View_Exception(&quot;Data must be a numeric or array of value, maxvalue.&quot;);\r\n        }\r\n        \r\n        $percent = (string) number_format($percent, (int) $digits, $this-&gt;_decPoint, $this-&gt;_thousandsSep);\r\n        \r\n        // Remove trailing zeroes and dot\r\n        if ($this-&gt;_trimTrail AND $digits &gt; 0) {\r\n            $percent = rtrim($percent, '0');\r\n            $percent = rtrim($percent, $this-&gt;_decPoint);\r\n        }\r\n        \r\n        // Append percent symbol\r\n        $percent .= $this-&gt;_symbol;\r\n        \r\n        return $percent;\r\n    }\r\n    \r\n    /**\r\n     * Calculates the percent based on value and maxvalue.\r\n     *\r\n     * @param numeric $val - Current value\r\n     * @param numeric $maxval - Total value\r\n     * @return float - percent of total value\r\n     */\r\n    public function calcPercent($val, $maxval)\r\n    {\r\n        $maxval = (float) $maxval;\r\n        if (0 == $maxval) {\r\n            throw new Zend_View_Exception(&quot;Maxval must be a non-zero value.&quot;);\r\n        }\r\n        \r\n        return (float) $val / $maxval * 100;\r\n    }\r\n    \r\n    /**\r\n     * Enables or disabled the trimming of trailing zeroes and dots\r\n     *\r\n     * @param boolean $flag - true or false\r\n     * @return $this - Fluent interface\r\n     */\r\n    public function setTrimTrail($flag)\r\n    {\r\n        $this-&gt;_trimTrail = (bool) $flag;\r\n        \r\n        return $this;\r\n    }\r\n    \r\n    /**\r\n     * Sets the symbol to append to the percent value\r\n     *\r\n     * @param string $symbol - Percent symbol\r\n     * @return $this - Fluent interface\r\n     */\r\n    public function setSymbol($symbol)\r\n    {\r\n        $this-&gt;_symbol = (string) $symbol;\r\n        \r\n        return $this;\r\n    }\r\n    \r\n    /**\r\n     * Sets the decimal point character\r\n     *\r\n     * @param string $char - Decimal point character\r\n     * @return $this- Fluent interface\r\n     */\r\n    public function setDecPoint($char)\r\n    {\r\n        $this-&gt;_decPoint = (string) $char;\r\n        if (empty($this-&gt;_decPoint)) {\r\n            throw new Zend_View_Exception(&quot;Decimal point character cannot be empty.&quot;);\r\n        }\r\n        \r\n        return $this;\r\n    }\r\n    \r\n    /**\r\n     * Sets the thousands separator to use\r\n     *\r\n     * @param string $sep\r\n     * @return $this - Fluent interface\r\n     */\r\n    public function setThousandsSep($sep)\r\n    {\r\n        $this-&gt;_thousandsSep = $sep;\r\n        \r\n        return $this;\r\n    }\r\n}</pre>"
  status: "published"
  created: "2009-06-03 21:23:22"
  published: "2009-06-03 21:23:22"
-
  id: 12
  user_id: 1
  title: "\"Conjunction\" View Helper for the Zend Framework"
  url: "conjunction-view-helper-for-zend-framework"
  description: "<p>Joins many items together using a conjunction for prettier messages.</p>"
  content: "<p>Many times in dynamic web sites you will need to list items in a sentence, but if you don't know how many items there are then it can be tedious to join them with a conjunction. That's where the Conjunction view helper for the Zend Framework comes in. It accepts an array of items and joins them with commas except for the last item, which is prefixed with &quot;and&quot; or any other conjunction of your choice.</p> \r\n<p><strong>Usage (Within a View Script)</strong></p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\n$fruits = array(\r\n    'apples',\r\n    'bananas',\r\n    'oranges',\r\n    'lemons'\r\n);\r\n \r\necho $this-&gt;conjunction($fruits);\r\n// Outputs &quot;apples, bananas, oranges and lemons&quot;\r\n \r\necho $this-&gt;conjunction($fruits, 'or');\r\n// Outputs &quot;apples, bananas, oranges or lemons&quot;\r\n</pre> \r\n<p><strong>Class:&nbsp;Virgen_View_Helper_Conjunction</strong></p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\n/**\r\n * Uses a conjunction to join items in the English language as in the sentence:\r\n * \r\n * &quot;Red, blue and green are all colors.&quot;\r\n *\r\n */\r\nclass Virgen_View_Helper_Conjunction\r\n{\r\n    public function conjunction($items, $type = 'and')\r\n    {\r\n        // Return empty string if no items are in array\r\n        if (count($items) == 0) return '';\r\n        \r\n        // Return first item if only 1 item\r\n        if (count($items) == 1) return $items[0];\r\n        \r\n        // Build conjunction\r\n        $last = array_pop($items);\r\n        $first = implode(', ', $items);\r\n        \r\n        return &quot;{$first} {$type} {$last}&quot;;\r\n    }\r\n}</pre>"
  status: "published"
  created: "2009-06-03 21:25:02"
  published: "2009-06-03 21:25:02"
-
  id: 13
  user_id: 1
  title: "\"Truncate\" View Helper for the Zend Framework"
  url: "truncate-view-helper-for-zend-framework"
  description: "<p>Ever needed to truncate a long string for display purposes? This helper can make it easy.</p>"
  content: "<p>This simple view helper for the Zend Framework will truncate a string to the desired length and automatically add customizable prefixes and postfixes if the string was truncated.</p> \r\n<p><strong>Usage Example</strong></p> \r\n<p>This view helper works similarly to substr, with two additional parameters for specifying the prefix and postfix.</p> \r\n<pre class=\"brush:php; html-script: true;\"> \r\n&lt;h1&gt;My Truncated Blog Post&lt;/h1&gt;\r\n&lt;p&gt;&lt;?= $this-&gt;truncate($this-&gt;blog, 0, 40, '', '... [more]')&nbsp;?&gt;&lt;/p&gt;\r\n</pre> \r\n<p>If your blog post was very long (like this one), the result would be something like this:</p> \r\n<pre class=\"brush:xml\"> \r\n&lt;h1&gt;My Truncated&nbsp;Blog Post&lt;/h1&gt;\r\n&lt;p&gt;This simple view helper for the Zend Fra... [more]&lt;/p&gt;\r\n</pre> \r\n<p>Due to the fact this this helper works on the string directly, you may need to strip html tags first if your string is HTML, otherwise you will end up with a lot of broken tags!</p> \r\n<p><strong>Class:&nbsp;Virgen_View_Helper_Truncate</strong></p> \r\n<pre class=\"brush:php\"> \r\n&lt;?php\r\n \r\nclass Virgen_View_Helper_Truncate\r\n{\r\n    public function truncate($string, $start = 0, $length = 100, $prefix = '...', $postfix = '...')\r\n    {\r\n        $truncated = trim($string);\r\n        $start = (int) $start;\r\n        $length = (int) $length;\r\n        \r\n        // Return original string if max length is 0\r\n        if ($length &lt; 1) return $truncated;\r\n        \r\n        $full_length = iconv_strlen($truncated);\r\n        \r\n        // Truncate if necessary\r\n        if ($full_length &gt; $length) {\r\n            // Right-clipped\r\n            if ($length + $start &gt; $full_length) {\r\n                $start = $full_length - $length;\r\n                $postfix = '';\r\n            }\r\n            \r\n            // Left-clipped\r\n            if ($start == 0) $prefix = '';\r\n            \r\n            // Do truncate!\r\n            $truncated = $prefix . trim(substr($truncated, $start, $length)) . $postfix;\r\n        }\r\n        \r\n        return $truncated;\r\n    }\r\n}</pre>"
  status: "published"
  created: "2009-06-02 21:28:57"
  published: "2009-06-02 21:28:57"
-
  id: 14
  user_id: 1
  title: "Building an Identity Map in PHP"
  url: "building-identity-map-php"
  description: "<p>\r\n	An identity map is a useful tool to keep track of all of the domain entities that are created in PHP. Here&#39;s an easy way to add one to your projects.</p>"
  content: "<p>\r\n	I have been using an <a href=\"http://martinfowler.com/eaaCatalog/identityMap.html\">identity map</a> in my web applications for quite some time. It&#39;s useful to keep track of all of the domain entities that have been created throughout the life of the request. It keeps me from loading the same object twice and makes it easier to do strict comparisons (===).</p>\r\n<p>\r\n	Without an identity map, you can easily run into problems because you may have more than one object that references the same domain entity.</p>\r\n<pre class=\"brush:php\">\r\n$userA = $userMapper-&gt;find(123); // new object created\r\n$userB = $userMapper-&gt;find(123); // new object created\r\n\r\necho $userA-&gt;getName(); // Hector\r\necho $userB-&gt;getName(); // Hector\r\n\r\n$userA-&gt;setName(&#39;Bob&#39;);\r\necho $userA-&gt;getName(); // Bob\r\necho $userB-&gt;getName(); // Hector ?!?\r\n</pre>\r\n<p>\r\n	The identity map solves this problem by acting as a registry for all loaded domain instances.</p>\r\n<p>\r\n	To build my identity map, the first thing I did was to make sure that each of my entities had a unique ID to distinguish it from other entities of the same type. To enforce this, I created an interface for my entities to implement:</p>\r\n<pre class=\"brush:php\">\r\ninterface Virgen_Entity_Interface\r\n{\r\n    public function getId();\r\n}</pre>\r\n<p>\r\n	The next step was to update my domain entities to implement this interface.</p>\r\n<pre class=\"brush:php\">\r\nclass Default_Model_User implements Virgen_Entity_Interface\r\n{\r\n    protected $_id;\r\n\r\n    public function setId($id)\r\n    {\r\n        $this-&gt;_id = (int) $id;\r\n    }\r\n\r\n    public function getId()\r\n    {\r\n        return $this-&gt;_id;\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	The ID can be anything, but because I&#39;m using a relational database with an auto-incrementing primary key, I can use that value as my ID because I know it will be unique for each user.</p>\r\n<p>\r\n	Next comes the Identity Map. It will act as a registry to store entities so I can load it again later. To ensure that we don&#39;t end up with duplicates, we&#39;ll use a static array property to store the entities:</p>\r\n<pre class=\"brush:php\">\r\nclass Virgen_Entity_IdentityMap\r\n{\r\n    protected static $_identities = array();\r\n\r\n    public static function loadEntity($class, $id)\r\n    {\r\n        $key = self::_generateKey($class, $id);\r\n        if (isset(self::$_identities[$key])) {\r\n            return self::$_identities[$key];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static function storeEntity(Virgen_Entity_Interface $entity)\r\n    {\r\n        $class = get_class($entity);\r\n        $id = $entity-&gt;getId();\r\n        $key = self::_generateKey($class, $id);\r\n        self::$_identities[$key] = $entity;\r\n    }\r\n\r\n    protected static function _generateKey($class, $id)\r\n    {\r\n        return $class . &#39;-&#39; . $id;\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	The identity map has two public static functions that you can use to load and store entities.</p>\r\n<p>\r\n	You&#39;ll notice that the loadEntity() method accepts a class name and an ID. The reason for this is you don&#39;t want to have to instantiate the object <em>before</em> checking if you need to instantiate it. By passing in the class name and ID, you can query the identity map for the entity. If it returns an object, then you&#39;re good to go. If it&#39;s not already loaded, the identity map will return false and you&#39;ll need to create your object manually.</p>\r\n<p>\r\n	The storeEntity() method accepts an instance of Virgen_Entity_Interface, and calls its getId() method to help it create a unique key for the domain entity. The unique key is the entity&#39;s class name joined to the ID with a hyphen.</p>\r\n<p>\r\n	The IdentityMap works best with data mappers. Here&#39;s an example data mapper for the &quot;user&quot; entity.</p>\r\n<pre class=\"brush:php\">\r\nclass Default_Model_Mapper_User\r\n{\r\n    public function find($id)\r\n    {\r\n        if (false !== ($user = Virgen_Entity_IdentityMap::loadEntity(&#39;Default_Model_User&#39;, $id))) {\r\n            // Found existing user, return it.\r\n            return $user;\r\n        }\r\n        \r\n        // Existing user not loaded\r\n        $user = new Default_Model_User();\r\n        \r\n        // Populate $user with data from persistant storage\r\n        /* ... */\r\n\r\n        // Store user in identity map\r\n        Virgen_Entity_IdentityMap::storeEntity($user);\r\n\r\n        return $user;\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	The first time you try to find the user ID 123, the identity map will return false and the mapper will do it&#39;s work of constructing it from the data in the persistant storage. But the second time you call find with that same ID, the identity map will return the object created earlier.</p>\r\n<pre class=\"brush:php\">\r\n$mapper = new Default_Model_Mapper_User();\r\n\r\n$userA = $mapper-&gt;find(123); // new object created\r\n$userB = $mapper-&gt;find(123); // same object return\r\n\r\necho $userA-&gt;getName(); // Hector\r\necho $userB-&gt;getName(); // Hector\r\n\r\n$userA-&gt;setName(&#39;Bob&#39;);\r\n\r\necho $userA-&gt;getName(); // Bob\r\necho $userB-&gt;getName(); // Bob\r\n</pre>\r\n<p>\r\n	Much better :)</p>\r\n<p>\r\n	If your data mapper is also responsible for saving domain entities in the persistant storage, you will also want to update your save() method to store the entity in the identity map after a successful save. This way, you can be sure that if you want to find that entity again later it will be pulled from the identity map:</p>\r\n<pre class=\"brush:php\">\r\nclass Default_Model_Mapper_User\r\n{\r\n    /* ... */\r\n\r\n    public function save(Default_Model_User $user)\r\n    {\r\n        if (null !== ($id = $user-&gt;getId())) {\r\n            // update persistant storage\r\n        } else {\r\n            // insert into persistant storage and capture ID\r\n        }\r\n\r\n        Virgen_Entity_IdentityMap::storeEntity($user);\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	By using an identity map you can be confident that your domain entity is shared throughout your application for the duration of the request.</p>\r\n<p>\r\n	Note that using an identity map is <strong>not</strong> the same as adding a cache layer to your mappers. Although caching is useful and encouraged, it can still produce duplicate objects for the same domain entity.</p>\r\n<p>\r\n	However, caching can further improve your data mappers but its important to note the order:</p>\r\n<ol>\r\n	<li>\r\n		Check the identity map first.</li>\r\n	<li>\r\n		If the entity is not found, check the cache.</li>\r\n	<li>\r\n		If not in the cache, load it from persistant storage.</li>\r\n</ol>\r\n<p>\r\n	By following the order above you can reap the benefits of both identity maps and caching systems.</p>"
  status: "published"
  created: "2010-02-09 20:45:13"
  modified: "2010-02-09 20:58:51"
  published: "2010-02-09 20:45:13"
-
  id: 15
  user_id: 1
  title: "Improved Comment Support"
  url: "improved-comment-support"
  description: "<p>\r\n	Commenting on my blog just got easier!</p>"
  content: "<p>\r\n	I&#39;ve improved the comment support today for this site. The first change allows visitors to post a comment without requiring logging in. But to help protect against those evil spammers, I&#39;ve added a captcha and set up Akismet to help keep the spam low.</p>\r\n<p>\r\n	I&#39;ve also made it easier for authenticated users to comment by no longer asking for your name, e-mail address, or website. I plan to pull that information eventually though OpenID -- as long as the user agrees to it, of course.</p>\r\n<p>\r\n	I&#39;ve also improved the JavaScript in the comments area. If you haven&#39;t posted a comment yet, you&#39;ll some nice Ajax and jQuery going on. Nothing fancy, really, just an overall better user experience in my opinion.</p>\r\n<p>\r\n	If you run into any issues with this site or have a suggestion for a new blog post, just let me know!</p>"
  status: "published"
  created: "2010-02-13 22:24:42"
  published: "2010-02-13 22:24:42"
-
  id: 16
  user_id: 1
  title: "My Favorite Gmail Label"
  url: "favorite-gmail-label"
  description: "<p>\r\n	Labels in Gmail are awesome as is, but this label has to be the best!</p>"
  content: "<p>\r\n	Ever since I discovered labels in Gmail, I&#39;ve been using them like crazy to organize my ever-growing inbox. The best part about labels is that you can create filters to automatically attach labels to new messages as they come in. Additionally, you can attach more than one label to a conversation.</p>\r\n<p>\r\n	My favorite label is one called &quot;Me&quot;. I know, I&#39;m so self-centered!</p>\r\n<p>\r\n	But it comes in so handy! What I did was I created a filter that matches messages where the &quot;from&quot; address is my own e-mail address and applies the label &quot;Me&quot;.</p>\r\n<p>\r\n	Matches: from([my e-mail address])<br />\r\n	Do this: apply label &quot;Me&quot;</p>\r\n<p>\r\n	Now, each time I reply to an e-mail or write a new one, the label &quot;Me&quot; is automatically applied.</p>\r\n<p>\r\n	This means when I look at my inbox I can easily see which conversations I was a part of because they will have the &quot;Me&quot; label. This is especially useful because I belong to a lot of mailing lists, but only participate in a handful of the threads.</p>\r\n<p>\r\n	So when I see a new message show up at the top of my inbox and it has the label &quot;Me&quot;, I immediately know that I was part of that conversation and am more than likely to be very interested in reading the new reply.</p>\r\n<p>\r\n	However, clicking the label to view all messages labeled with &quot;Me&quot; is virtually identical to viewing the &quot;Sent Mail&quot; folder. So viewing this label on its own isn&#39;t all that useful.&nbsp;</p>\r\n<p>\r\n	To add your own &quot;Me&quot; label to Gmail, follow these quick steps:</p>\r\n<ol>\r\n	<li>\r\n		Log into Gmail and click the &quot;Settings&quot; link</li>\r\n	<li>\r\n		Click the &quot;Filters&quot; tab&nbsp;</li>\r\n	<li>\r\n		Scroll down and click the &quot;Create a new filter&quot; link</li>\r\n	<li>\r\n		In the &quot;From&quot; box, enter your own Gmail address</li>\r\n	<li>\r\n		Click the &quot;Next Step&quot; button</li>\r\n	<li>\r\n		Check the box next to &quot;Apply the label&quot;</li>\r\n	<li>\r\n		Click the &quot;Choose label&quot; dropdown box and select &quot;New Label&quot;</li>\r\n	<li>\r\n		Type in &quot;Me&quot; (or whatever you want to call it) and click &quot;OK&quot;</li>\r\n	<li>\r\n		Optionally select &quot;Apply filter to x conversations below&quot; (recommended)</li>\r\n	<li>\r\n		Click Create Filter</li>\r\n</ol>\r\n<p>\r\n	That&#39;s it! Now every single conversation you are a part of will be labeled.&nbsp;</p>"
  status: "published"
  created: "2010-04-24 16:36:43"
  published: "2010-04-24 16:38:39"
-
  id: 17
  user_id: 1
  title: "Taming Getters and Setters"
  url: "taming-getters-and-setters"
  description: "<p>\r\n	Getters and Setters can be evil, but with a little bit of love (and a long whip), they can be tamed.</p>"
  content: "<p>\r\n	It has recently come to my attention that getters and setters are evil. No, they won&#39;t run off with your first-born child, nor will they pour gasoline into your cereal. But, according to other programmers on the interwebs, they can lead to poor object-oriented design.</p>\r\n<p>\r\n	However, problems can be found with just about any single line of code in your application. As a PHP developer I&#39;ve even heard complaints about the opening PHP tag itself!</p>\r\n<p>\r\n	But I want to look more closely at getters and setters to find out why they are evil and what we can do to tame them.</p>\r\n<p>\r\n	Based on <a href=\"http://www.virgentech.com/blog/2010/04/taming-getters-and-setters.html\">various</a> <a href=\"http://typicalprogrammer.com/?p=23\">web</a> <a href=\"http://www.codeinstructions.com/2008/08/getters-and-setters-are-evil.html\">blogs</a>, getters are referred to as a &quot;code smell&quot; that can easily cause problems down the road. Most of these articles are referring to Java, but since I program in PHP I wanted to see if it applies. Let&#39;s use a simple User object to see what havoc it can wreak:</p>\r\n<pre class=\"brush:php\">\r\nclass User\r\n{\r\n    protected $_firstName;\r\n    protected $_lastName;\r\n\r\n    public function getFirstName()\r\n    {\r\n        return $this-&gt;_firstName;\r\n    }\r\n\r\n    public function getLastName()\r\n    {\r\n        return $this-&gt;_lastName;\r\n    }\r\n}</pre>\r\n<p>\r\n	So here we have a simple User class that appears to politely return the first and last name of the user on demand. I don&#39;t see any horns, hooves, nor a tail, so how can this be evil?</p>\r\n<p>\r\n	What we mere mortals tend to forget is that evil is the master of deception. It won&#39;t become obvious that we&#39;ve raised hell in code by committing this innocent-looking class to our repository.</p>\r\n<p>\r\n	However, let&#39;s see what happens when we start using this class. Let&#39;s say we&#39;re building a simple profile page and need to display the user&#39;s full name wrapped in a fancy H1:</p>\r\n<pre class=\"brush:php\">\r\n$user = new User();\r\necho &quot;&lt;h1&gt;{$user-&gt;getFirstName()} {$user-&gt;getLastName()}&lt;/h1&gt;&quot;;</pre>\r\n<p>\r\n	Seems simple enough. Just get the first and last name and put a space in between. You test it, everything works, you can commit your code and go home for the day.</p>\r\n<p>\r\n	But the problem here is that your view is determining which data constitutes the user&#39;s full name. And this becomes a bigger problem when you have many views all trying to show the same full name.</p>\r\n<p>\r\n	Since this is really a business rule, it belongs in the User class. Behold:</p>\r\n<pre class=\"brush:php\">\r\nclass User\r\n{\r\n    protected $_firstName;\r\n    protected $_lastName;\r\n\r\n    public function getFullName()\r\n    {\r\n        return &quot;{$this-&gt;_firstName} {$this-&gt;_lastName}&quot;;\r\n    }\r\n}</pre>\r\n<p>\r\n	With this small change to our User class, we can guarantee that the full name will always be rendered the same. In other words, <strong>we don&#39;t need no stinking getters</strong>.</p>\r\n<p>\r\n	So we&#39;ve successfully converted our evil class into something slightly less evil. We&#39;ve removed those pesky getters and encapsulated the full name in a method. But we still have a long way to go before we can sleep peacefully.</p>\r\n<p>\r\n	By now you may be asking yourself &quot;how does the first and last name properties get populated?&quot; That&#39;s a very good question!</p>\r\n<p>\r\n	If you&#39;ve been following my blog you may have noticed that I am a fan of the Data Mapper pattern. It separates business logic from persistence logic, allowing you to swap out persistence logic at any time. This means in order to persist that user object, the mapper needs to somehow access the $_firstName and $_lastName properties.</p>\r\n<p>\r\n	Can this be done without getters? Sure, why not?</p>\r\n<pre class=\"brush:php\">\r\nclass User\r\n{\r\n    /* ... */\r\n\r\n    public function getData()\r\n    {\r\n        return array(\r\n            &#39;firstName&#39; =&gt; $this-&gt;_firstName,\r\n            &#39;lastName&#39; =&gt; $this-&gt;_lastName\r\n        );\r\n    }\r\n}\r\n\r\n</pre>\r\n<p>\r\n	But is this any better? Now it&#39;s just a &quot;super-getter&quot; that returns all the properties at once. So this doesn&#39;t really solve the problem, it just disguises it under a different method. So you might as well keep all those getters in there because your mapper is going to need to access them anyways.</p>\r\n<h3>\r\n	What about setters?</h3>\r\n<p>\r\n	Another problem you may run into is when a user decides to change her name (maybe she just got married and wants to update her last name). How would you accomplish this <em>without</em> a setter?</p>\r\n<p>\r\n	What you might want to do is avoid using a set* method. Maybe we&#39;ll call it &quot;updateLastName&quot;:</p>\r\n<pre class=\"brush:php\">\r\nclass User\r\n{\r\n    /* ... */\r\n\r\n    public function updateLastName($newLastName)\r\n    {\r\n        $this-&gt;_lastName = $newLastName;\r\n    }\r\n}\r\n\r\n</pre>\r\n<p>\r\n	In reality, this method is identical to what a setLastName method would be. So how is this any better?</p>\r\n<p>\r\n	It&#39;s not. Especially when you consider how the mapper is supposed to load a user from persistent storage. For example, it will need to create a new User object and then &quot;set&quot; all of its properties based on the persisted data. In other words, you&#39;re going to need setters.</p>\r\n<h3>\r\n	Not-So-Conclusive Conclusion</h3>\r\n<p>\r\n	When it comes to domain entities, like the aforementioned User object, some parts of your application are going to need the getters and setters, while other parts should be working with just the &quot;business&quot; methods.</p>\r\n<p>\r\n	In other words, getters and setters are a necessary evil that helps you accomplish certain tasks, but they must be used wisely.</p>\r\n<p>\r\n	Some OO purists may say that getters and setters are a &quot;code smell&quot;, but I say that using <strong>only</strong> getters and setters is where the real stink is.</p>"
  status: "published"
  created: "2010-04-26 12:48:08"
  modified: "2010-04-26 13:49:09"
  published: "2010-04-26 13:43:22"
-
  id: 18
  user_id: 1
  title: "Why Singletons Are Evil"
  url: "why-singletons-are-evil"
  description: "<p>\r\n	Singletons can cause more problems than they solve.</p>"
  content: "<p>\r\n	One of the nice things about design patterns is that once you learn them they are really quite easy to implement. One of the simplest design patterns is the Singleton. Not only does it comprise of a single class, but it can be built and used very quickly.</p>\r\n<p>\r\n	The basic idea behind a Singleton is to limit the number of instances allowed throughout the application. Usually they&#39;re limited to a single instance (hence the name &quot;Singleton&quot;) but can be modified to support any number of instances.</p>\r\n<p>\r\n	Here&#39;s a Singleton implementation in PHP:</p>\r\n<pre class=\"brush:php\">\r\nclass MySingleton {\r\n    protected static $_instance;\r\n    \r\n    protected function __construct() {}\r\n    \r\n    protected function __clone() {}\r\n    \r\n    public static function getInstance()\r\n    {\r\n        if (null === self::$_instance) {\r\n            self::$_instance = new self();\r\n        }\r\n        return self::$_instance;\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	Starting at the top, we have a single static property called $_instance. This will eventually hold our singleton instance.</p>\r\n<p>\r\n	Continuing on, you&#39;ll notice that __construct() and __clone() are protected. This prevents these methods from being called from anywhere outside the class. In other words, you won&#39;t be able to call the code <code>new MySingleton();</code> unless you&#39;re inside the class. The same is true for cloning -- it can only be done inside of the class. Any attempt to instantiate or clone this class from the outside will cauase a fatal error in PHP.</p>\r\n<pre class=\"brush:php\">\r\n$mySingleton = new MySingleton();\r\n// Fatal error!\r\n</pre>\r\n<p>\r\n	Lastly, there is a static <code>getInstance()</code> method. Note that it&#39;s marked public, meaning it <em>can</em> be called from the outside. Inside this method, it checks the <code>$_instance</code> property to see if its null and, if it is, lazy-loads the instance into that property.</p>\r\n<pre class=\"brush:php\">\r\n$mySingleton = MySingleton::getInstance();\r\n// This works!\r\n</pre>\r\n<p>\r\n	If you were to call that code again later, the same instance would be returned instead of a new one. This pattern can be used to ensure that the application isn&#39;t creating multiple objects unneccessarily. For example, you probably don&#39;t want multiple logger instances throughout your app if they&#39;re all writing to the same log.</p>\r\n<p>\r\n	This pattern is as elegant as it is simple, <em>but it comes with a price</em>.</p>\r\n<p>\r\n	One of the major problems with singletons is that they are very sneaky -- just like global variables. Consider this portion of a class that uses a database singleton:</p>\r\n<pre class=\"brush:php\">\r\nclass Users\r\n{\r\n    public function fetchAll()\r\n    {\r\n        // Singleton access to DB\r\n        $db = MyDatabase::getInstance();\r\n        \r\n        // Fetch all users\r\n        return $db-&gt;fetchAll(&#39;SELECT * FROM users WHERE 1&#39;);\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	From the outside world, a client developer would probably write code something like this:</p>\r\n<pre class=\"brush:php\">\r\n$users = new Users();\r\n$allUsers = $users-&gt;fetchAll();\r\n</pre>\r\n<p>\r\n	While that looks simple enough, the client developer has <em>no idea</em> that a database is involved unless she examines the source code. This is what&#39;s known as a hidden dependency.</p>\r\n<p>\r\n	Additionally, this makes the <code>Users</code> class very difficult to unit test. How would you write a test that uses a mock database? There&#39;s no way to inject a mock database unless you create a duplicate MyDatabase class.</p>\r\n<p>\r\n	A better alternative would be to require that all dependencies be injected instead of statically loaded:</p>\r\n<pre class=\"brush:php\">\r\nclass Users\r\n{\r\n    protected $_db;\r\n    \r\n    public function __construct(MyDatabase $db)\r\n    {\r\n        $this-&gt;_db = $db;\r\n    }\r\n\r\n    public function fetchAll()\r\n    {\r\n        // Fetch all users\r\n        return $this-&gt;_db-&gt;fetchAll(&#39;SELECT * FROM users WHERE 1&#39;);\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	Let&#39;s see how this changes the client&#39;s code:</p>\r\n<pre class=\"brush:php\">\r\n$db = MyDatabase::getInstance();\r\n$users = new Users($db);\r\n$allUsers = $users-&gt;fetchAll();\r\n</pre>\r\n<p>\r\n	What a difference! Now it&#39;s obvious that a database is involved without having to look at the source of the <code>Users</code> class. Additionally, it provides us with a way to inject a mock database for unit testing.</p>\r\n<p>\r\n	But we&#39;re still using a singleton, and it&#39;s all too tempting to revert back to sprinkling our classes with calls to its <code>getInstance</code> method. Additionally, when unit testing, it becomes a task to have to reset all of our singletons between each test. Is there a better way?</p>\r\n<p>\r\n	Lately I&#39;ve been avoiding singletons entirely and sticking to basic classes. In order to ensure that only one instance is used, I bootstrap that instance. For example, in the Zend Framework I create a bootstrap resource class that can load my single instance. Whenever I need the resource, I pull it from the bootstrap and inject it into the class that needs it. This means I can inject stubs into the bootstrap to test my application and don&#39;t have to worry about hidden dependencies causing failures.</p>"
  status: "published"
  created: "2010-08-26 16:56:56"
  modified: "2010-08-26 16:57:53"
  published: "2010-08-26 16:56:56"
-
  id: 19
  user_id: 1
  title: "ZendCon 2010 - Reusable Bootstrap Resources"
  url: "zendcon-reusable-bootstrap-resources"
  description: "<p>\r\n	Slides from my talk on Reusable Bootstrap Resources at ZendCon 2010.</p>"
  content: "<p>\r\n	Here are the slides from my talk on Reusable Bootstrap Resources, presented on the second day of ZendCon 2010.</p>\r\n<div id=\"__ss_5648664\" style=\"width:425px\">\r\n	<strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/djvirgen/reusable-bootstrap-resources-zend-con-2010\" title=\"Reusable bootstrap resources   zend con 2010\">Reusable bootstrap resources zend con 2010</a></strong><object height=\"355\" id=\"__sse5648664\" width=\"425\"><param name=\"movie\" value=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=reusablebootstrapresources-zendcon2010-101102160850-phpapp02&amp;stripped_title=reusable-bootstrap-resources-zend-con-2010&amp;userName=djvirgen\" /><param name=\"allowFullScreen\" value=\"true\" /><param name=\"allowScriptAccess\" value=\"always\" /><embed allowfullscreen=\"true\" allowscriptaccess=\"always\" height=\"355\" name=\"__sse5648664\" src=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=reusablebootstrapresources-zendcon2010-101102160850-phpapp02&amp;stripped_title=reusable-bootstrap-resources-zend-con-2010&amp;userName=djvirgen\" type=\"application/x-shockwave-flash\" width=\"425\"></embed></object>\r\n	<div style=\"padding:5px 0 12px\">\r\n		View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/djvirgen\">Hector Virgen</a>.</div>\r\n</div>"
  status: "published"
  created: "2010-11-10 08:07:39"
  published: "2010-11-10 08:07:40"
-
  id: 20
  user_id: 1
  title: "Extending Navigation View Helpers in Zend Framework"
  url: "extending-navigation-view-helpers-zend-framework"
  description: "<p>\r\n	A question that comes up from time to time in the Zend Framework mailing list is how to extend Zend Framework&#39;s Navigation view helpers such as Menu and Breadcrumbs. This quick tutorial will show you how.</p>"
  content: "<p>\r\n	A question that comes up from time to time in the Zend Framework mailing list is how to extend Zend Framework&#39;s Navigation view helpers. By following these simple steps, you&#39;ll be able provide your own Navigation view helpers while still taking advantage of what Zend Framework has provided.</p>\r\n<h2>\r\n	How Most Helpers are Extended</h2>\r\n<p>\r\n	Most of Zend Framework&#39;s view helpers can easily be extended by providing a helper with the same name within your application. Since <strong><code>Zend_View</code></strong> uses a plugin loader to locate view helpers, you can use the same helper name while avoid conflicts. Here&#39;s a basic example:</p>\r\n<p>\r\n	Let&#39;s say you want to extend the Json view helper so that it always pretty prints the JSON. You could simply create your own &quot;Json&quot; view helper, extend Zend&#39;s Json view helper, and save it at <code>application/views/helpers/Json.php</code>:</p>\r\n<pre class=\"brush:php\">\r\n&lt;?php\r\n\r\nclass Default_View_Helper_Json extends Zend_View_Helper_Json\r\n{\r\n    public function json($data, $keepLayouts = false)\r\n    {\r\n        $json = parent::json($data, $kepLayouts);\r\n        return Zend_Json::prettyPrint($json);\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	Additionally, you&#39;ll want to be sure that your view can find your new view helper, so you&#39;ll need to add this line to your <code>application/configs/application.ini</code> under the <code>production</code> section:</p>\r\n<pre class=\"brush:php\">\r\nresources.view.helperPath.Default_View_Helper = APPLICATION_PATH &quot;/views/helpers&quot;\r\n</pre>\r\n<p>\r\n	Now, whenever your view scripts call <strong><code>$this-&gt;json()</code></strong>, your improved view helper will be used. Seems easy enough!</p>\r\n<h2>\r\n	What About Them Navigation Helpers?</h2>\r\n<p>\r\n	So now let&#39;s say that you want to improve ZF&#39;s &quot;menu&quot; view helper. For example, you want to output an HTML comment whenever we call the menu helper&#39;s <strong><code>renderMenu()</code></strong> method. Why would you want to do this? I have no idea, but for the purposes of this tutorial let&#39;s say that&#39;s what we want to do.</p>\r\n<p>\r\n	So let&#39;s follow the same steps as we did with our custom Json view helper and see what happens. So first we define our helper and save it at <code>application/views/helpers/Menu.php</code>:</p>\r\n<pre class=\"brush:php\">\r\n&lt;?php\r\n\r\nclass Default_View_Helper_Menu extends Zend_View_Helper_Navigation_Menu\r\n{\r\n    public function renderMenu(Zend_Navigation_Container $container, array $options = array())\r\n    {\r\n        return &#39;<!-- renderMenu called! -->&#39; . parent::renderMenu($container, $options);\r\n    }\r\n}\r\n</pre>\r\n<p>\r\n	Again, we make sure our application&#39;s configuration includes the path to this helper:</p>\r\n<pre class=\"brush:php\">\r\nresources.view.helperPath.Default_View_Helper = APPLICATION_PATH &quot;/views/helpers&quot;\r\n</pre>\r\n<p>\r\n	And then we update our layout to call the view helper:</p>\r\n<pre class=\"brush:php\">\r\n&lt;?php echo $this-&gt;navigation()-&gt;menu()-&gt;renderMenu(); ?&gt;\r\n</pre>\r\n<p>\r\n	We then visit our page in a browser and look for the comment -- but it&#39;s not there! Why did it not pick up our custom Menu helper, while it picked up our custom Json helper with no problem?</p>\r\n<h2>\r\n	What&#39;s Going On? I&#39;m scared!</h2>\r\n<p>\r\n	There&#39;s no need to be afraid! Let&#39;s just take a look under the hood to see what&#39;s happening.</p>\r\n<p>\r\n	First of all, you might have noticed that Zend&#39;s &quot;menu&quot; view helper is not located in the same place as all the other Zend view helpers. Most of them (including the Json view helper) are located here:</p>\r\n<p>\r\n	<code>Zend/View/Helper</code></p>\r\n<p>\r\n	But the Menu view helper is located here:</p>\r\n<p>\r\n	<code>Zend/View/Helper/Navigation</code></p>\r\n<p>\r\n	In order for <code><strong>Zend_View</strong></code> to load the navigation helpers, a new prefix path must be added to your view instance. The parent helper &quot;Navigation&quot; is smart enough to add this prefix path for us, but often times this happens very late in the request&#39;s life time (after your view has been bootstrapped). This results in the prefix paths being set up thusly:</p>\r\n<ul>\r\n	<li>\r\n		<code>Zend/View/Helper</code></li>\r\n	<li>\r\n		<code>application/views/helpers</code></li>\r\n	<li>\r\n		<code>Zend/View/Helper/Navigation</code></li>\r\n</ul>\r\n<p>\r\n	Since <strong><code>Zend_View</code></strong> uses a Last In, First Out (LIFO) stack to find view helpers, this means the path <code>Zend/View/Helper/Navigation</code> is the first place it looks for the Menu helper. Since ZF&#39;s helper exists there, it ends up being used and your custom Menu helper never gets called.</p>\r\n<p>\r\n	The solution is to take back control of the view&#39;s helper paths by manually adding <code>Zend/View/Helper/Navigation</code> to the stack before your custom helper path. You can do this by modifying your application.ini like this:</p>\r\n<pre class=\"brush:php\">\r\nresources.view.helperPath.Zend_View_Helper_Navigation = &quot;Zend/View/Helper/Navigation&quot;\r\nresources.view.helperPath.Default_View_Helper = APPLICATION_PATH &quot;/views/helpers&quot;\r\n</pre>\r\n<p>\r\n	This results in a change in the LIFO stack, which now looks like this:</p>\r\n<ul>\r\n	<li>\r\n		<code>Zend/View/Helper</code></li>\r\n	<li>\r\n		<code>Zend/View/Helper/Navigation</code></li>\r\n	<li>\r\n		<code>application/views/helpers</code></li>\r\n</ul>\r\n<p>\r\n	Now your view will look in your custom helpers before checking the Zend directories for that Menu helper.</p>\r\n<h2>\r\n	Conclusion</h2>\r\n<p>\r\n	Zend&#39;s Navigation view helpers can be a bit tricky to extend at first glance, but once you see how the order of the plugin paths matter it starts to make a lot more sense.</p>\r\n<p>\r\n	One of the great things about Zend Framework is its extensibility, but sometimes it can be frustrating when things don&#39;t work as you&#39;d expect. Sometimes all you need to do is just peek through the source to find your answers.</p>"
  status: "published"
  created: "2011-05-10 22:17:24"
  modified: "2011-05-10 22:22:37"
  published: "2011-05-10 22:17:24"
-
  id: 21
  user_id: 1
  title: "BDD in Node.js with Mocha, Should and CoffeeScript"
  url: "bdd-in-node-js-with-mocha-should-and-coffeescript"
  description: "<p>\r\n	How to effectively use behavior-driven development in node.js with mocha and should.</p>"
  content: "<p>\r\n	I&#39;m a fan of Behaviour-Driven Development (BDD), and once I got my hands on Mocha and Should, things really clicked when it came to my node.js apps.</p>\r\n<p>\r\n	Here&#39;s how to set up your node.js app for BDD with Mocha and Should.</p>\r\n<p>\r\n	First of all we need to install our dependencies, and ensure they are only installed for development:</p>\r\n<pre class=\"console\">\r\n$ cd myapp\r\n$ npm install --save-dev mocha should coffee-script\r\n</pre>\r\n<p>\r\n	Next, create a &quot;test&quot; directory. This is where all of your test files will live, along with another other files that will be used to support our tests.</p>\r\n<pre class=\"console\">\r\n$ mkdir test\r\n</pre>\r\n<p>\r\n	Next, create a file in test/mocha.opts to store your mocha configuration and place this in it:</p>\r\n<pre class=\"console\">\r\n--require should\r\n--reporter spec\r\n--ui bdd\r\n--compilers coffee:coffee-script\r\n--globals config</pre>\r\n<p>\r\n	This will allow you to run your tests by simply typing the command mocha.</p>\r\n<p>\r\n	Our next task to create a test. Let&#39;s consider the following requirements:</p>\r\n<ul>\r\n	<li>\r\n		Page should have properties &quot;title&quot;, &quot;content&quot;, and &quot;url&quot;</li>\r\n	<li>\r\n		Page should auto-generate url based on title if not specified</li>\r\n</ul>\r\n<p>\r\n	So far this is pretty straight-forward, so let&#39;s start with the first requirement.</p>\r\n<p>\r\n	Create a file named &quot;test/models/page_test.coffee&quot; and add a test to ensure that the Page class exists. At first, it will fail until we create the Page class.</p>\r\n<pre class=\"brush:ruby\">\r\nPage = require &quot;#{__dirname}/../models/page&quot;\r\n\r\ndescribe &#39;Page&#39;, -&gt;\r\n  it &#39;exists&#39;, -&gt;\r\n    Page.should.be.ok\r\n    page = new Page\r\n    page.should.be.instanceOf Page\r\n\r\n</pre>\r\n<p>\r\n	This test simply verifies that the Page class exists and that it can be instantiated. At this point, our test should fail because we have not created the page model yet.</p>\r\n<pre class=\"console\">\r\n$ mocha\r\n\r\nmodule.js:340\r\n&nbsp; &nbsp; throw err;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^\r\nError: Cannot find module &#39;/Users/hvirgen/dev2/t/test/../models/page&#39;\r\n</pre>\r\n<p>\r\n	While this may look scary, it&#39;s simply saying it couldn&#39;t find the file that will contain our model. So let&#39;s create that now and provide it with a simple Page model.</p>\r\n<pre class=\"brush:ruby\">\r\n## models/page.coffee\r\nclass Page\r\n  constructor: -&gt;\r\n\r\nmodule.exports = Page\r\n</pre>\r\n<p>\r\n	Now we can run our tests and expect it to pass:</p>\r\n<pre class=\"console\">\r\n$ mocha\r\n\r\n  Page\r\n    âœ“ exists \r\n\r\n\r\n  âœ” 1 test complete (3ms)\r\n</pre>\r\n<p>\r\n	Excellent! We have a passing test, so we&#39;re on to a good start. Now let&#39;s look at that first requirement in more detail:</p>\r\n<p>\r\n	<em>Page should have properties &quot;title&quot;, &quot;content&quot;, and &quot;url&quot;</em></p>\r\n<p>\r\n	Let&#39;s think about how we want to set and access those properties. Perhaps we want to be able to set them during construction, and access them after it has been constructed. Let&#39;s build a test to confirm it.</p>\r\n<pre class=\"brush:ruby\">\r\n## test/page_test.coffee\r\ndescribe &#39;Page&#39;, -&gt;\r\n# ... #\r\n  describe &#39;properties&#39;, -&gt;\r\n    it &#39;can set title on instantiation&#39;, -&gt;\r\n      page = new Page(title: &#39;the title&#39;)\r\n      page.title.should.eql &#39;the title&#39;\r\n\r\n    it &#39;can set content on instantiation&#39;, -&gt;\r\n      page = new Page(content: &#39;the content&#39;)\r\n      page.content.should.eql &#39;the content&#39;\r\n\r\n    it &#39;can set url on instantiation&#39;, -&gt;\r\n      page = new Page(url: &#39;the-url&#39;)\r\n      page.url.should.eql &#39;the-url&#39;\r\n</pre>\r\n<p>\r\n	Next we implement the code to make the test pass:</p>\r\n<pre class=\"brush:ruby\">\r\n## models/page.coffee\r\nclass Page\r\n  constructor: (data = {})\r\n    @title    = data.title    if data.title?\r\n    @content  = data.content  if data.content?\r\n    @url      = data.url      if data.url?\r\n\r\n</pre>\r\n<p>\r\n	Now our tests should be passing, and we can move on to the second requirement:</p>\r\n<p>\r\n	<em>Page should auto-generate url based on title if not specified</em></p>\r\n<p>\r\n	The idea here is that if the url is not specified, it should be auto-generated based on the title of the page. Of course, we&#39;ll need to convert spaces to dashes, since spaces cannot be part of a url. So let&#39;s build a test:</p>\r\n<pre class=\"brush:ruby\">\r\n## test/page_test.coffee\r\n# ... #\r\n  it &#39;auto-generates url based on title if not set&#39;, -&gt;\r\n    page = new Page(title: &#39;the title&#39;)\r\n    page.url.should.eql &#39;the-title&#39;</pre>\r\n<p>\r\n	Let&#39;s implement the code that makes this pass:</p>\r\n<pre class=\"brush:ruby\">\r\n## models/page.coffee\r\nclass Page\r\n  constructor: (data) -&gt;\r\n    @title    = data.title    if data.title?\r\n    @content  = data.content  if data.content?\r\n    if data.url?\r\n      @url = data.url\r\n    else\r\n      @url = if data.title? then data.title.replace(/[^\\w]+/, &#39;-&#39;) else null\r\n# ... #\r\n</pre>\r\n<p>\r\n	Now we should have a passing test regarding default url.</p>\r\n<p>\r\n	Sweet! At this point, we&#39;ve fulfilled two requirements, but there&#39;s still a lot more to learn. Check out the <a href=\"https://github.com/visionmedia/mocha\">Mocha</a> and <a href=\"https://github.com/visionmedia/should.js\">Should</a> docs to learn more!</p>"
  status: "published"
  created: "2013-01-25 22:09:31"
  modified: "2013-01-27 13:48:05"
  published: "2013-01-25 23:00:04"
-
  id: 22
  user_id: 1
  title: "AngularJS and ProcessingJS Integration"
  url: "angularjs-and-processingjs-integration"
  description: "<p>\r\n	AngularJS and ProcessingJS are two of my favorite libraries when it comes to JavaScript. In this post I show how to make them play nicely together.</p>"
  content: "<p>\r\n	In this entry I&#39;ll describe how to integrate two of my favorite JavaScript libraries and make sure they play along nicely together.</p>\r\n<p>\r\n	<img alt=\"Fractal Clock with AngularJS and ProcessingJS\" src=\"/images/fractal-clock.png\" style=\"width: 100%; height: auto;\" /></p>\r\n<h2>\r\n	About AngularJS</h2>\r\n<p>\r\n	<a href=\"http://www.angularjs.org\">AngularJS</a> is a JavaScript framework for building Single Page Applications (SPA). It allows you to extend the capabilities of HTML and provides a very clean separation of concerns between HTML and JavaScript.</p>\r\n<h2>\r\n	About ProcessingJS</h2>\r\n<p>\r\n	<a href=\"http://processingjs.org/\">ProcessingJS</a> is a JavaScript library based on the popular Processing visual programming language. It allows you to build simple and advanced visuals using basic primitive shapes. You can write your sketches using .pde files or use the JavaScript API.</p>\r\n<h2>\r\n	Let&#39;s get started</h2>\r\n<p>\r\n	One of the first things you may learn when developing in AngularJS is that controllers should not do any DOM manipulation, including querying for elements, binding event listeners, or any other form of direct manipulation. In fact, controllers shouldn&#39;t know anything about the DOM at all.</p>\r\n<p>\r\n	However, controllers have access to a <code>$scope</code> object that acts as the glue between the HTML and JavaScript. With direct access to the models, this seems like the perfect place to set up your ProcessingJS sketch.</p>\r\n<h2>\r\n	How to set up a sketch without AngularJS</h2>\r\n<p>\r\n	If we were using ProcessingJS <em>without</em> AngularJS, we could set up our sketch using their JavaScript API. All we need to do is call <code>new Processing()</code> and pass in the <code>&lt;canvas&gt;</code> element and a function that accepts a single argument:</p>\r\n<pre class=\"brush:html\">\r\n&lt;canvas id=&quot;mySketch&quot;&gt;&lt;/canvas&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n(function() {\r\nvar canvas = document.getElementById(&#39;mySketch&#39;);\r\nvar sketch = function(processing) {\r\n    processing.setup = function() { /* ... */ };\r\n    processing.draw = function() { /* ... */ };\r\n};\r\nvar processing = new Processing(canvas, sketch);\r\n})();\r\n&lt;/script&gt;</pre>\r\n<p>\r\n	This is simple enough, but when you want to take advantage of AngularJS&#39;s 2-way data-binding to allow users to influence your sketch in some way, the above code just won&#39;t cut it.</p>\r\n<h2>\r\n	Sketching with AngularJS</h2>\r\n<p>\r\n	Since we should not be accessing the DOM within controllers, we&#39;ll need to build a directive:</p>\r\n<pre class=\"brush:js\">\r\nangular.module(&#39;virgen.processing&#39;, [])\r\n.directive(&#39;virgenProcessing&#39;, function() {\r\n  return function(scope, iElement, iAttr) {\r\n    scope.$processing = new Processing(iElement[0], scope[iAttr.virgenProcessing]);\r\n  };\r\n});</pre>\r\n<p>\r\n	With this simple directive, we can now write our HTML thusly:</p>\r\n<pre class=\"brush:html\">\r\n&lt;div ng-app=&quot;App&quot; ng-controller=&quot;MainController&quot;&gt;\r\n  &lt;canvas virgen-processing=&quot;sketch&quot;&gt;&lt;/canvas&gt;\r\n&lt;/div&gt;</pre>\r\n<p>\r\n	This directive will tell Angular that when it sees the <code>virgen-processing</code> attribute, it should call <code>new Processing()</code> with that element. Additionally, the function that you specify will be passed in as well, which will be defined in your controller:</p>\r\n<pre class=\"brush:js\">\r\nangular.module(&#39;App&#39;, [&#39;virgen.processing&#39;])\r\n.controller(&#39;MainController&#39;, function($scope) {\r\n  $scope.sketch = function(processing) {\r\n    processing.setup = function() { /* ... */ };\r\n    processing.draw = function() { /* ... */ };\r\n  };\r\n});</pre>\r\n<p>\r\n	Since your sketch function is defined within your controller, it will have full access to <code>$scope</code> and all of its models, as well as the full ProcessingJS API.</p>\r\n<p>\r\n	To see an example of ProcessingJS and AngularJS playing nicely together, check out my <a href=\"http://fractalclock.herokuapp.com/\">Fractal Clock</a> experiment.</p>"
  status: "published"
  created: "2013-07-17 21:11:40"
  modified: "2013-07-22 10:39:08"
  published: "2013-07-17 21:11:40"
-
  id: 23
  user_id: 1
  title: "How to Include AngularJS On Your Existing Website"
  url: "how-to-include-angularjs-on-your-existing-website"
  description: "<p>\r\n	Angular isn&#39;t just for fresh new green field projects. You can easily introduce your existing website to Angular and take advantage of all its two-way binding, clear separation of concerns, and declarative markup one section at a time.</p>"
  content: "<p>\r\n  Angular is a great framework for building Single Page Applications (SPA), especially if you&#39;re starting a new project from scratch. Often times, however, we are working with an existing codebase that may have been around for years. In this post I&#39;ll describe how we can take advantage of Angular in an existing non-Angular project.</p>\r\n<h2>\r\n  Easy Mode</h2>\r\n<p>\r\n  Angular allows you to specify which part of the DOM it should be managing with the <code>ng-app</code> directive. So one of the easiest ways to <em>Angularize</em> part of the page is to add the <code>ng-app</code> attribute to a top-level DOM element that you want managed by Angular:</p>\r\n<pre class=\"brush:html\">\r\n&lt;div&gt;\r\n  &lt;p&gt;This paragraph is not managed by Angular.&lt;/p&gt;\r\n  &lt;div ng-app&gt;\r\n    &lt;p&gt;This paragraph is managed by Angular.&lt;/p&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;</pre>\r\n<p>\r\n  Most likely you&#39;ll need a controller, so specify one via the <code>ng-controller</code> attribute. Note: most likely your app won&#39;t play nicely with angular routes, so using the <code>$routeProvider</code> service along with <code>ng-view</code> is not going to be a good idea. Keep it simple and assign a controller manually any of the elements under your <code>ng-app</code> element:</p>\r\n<pre class=\"brush:html\">\r\n&lt;div&gt;\r\n  &lt;p&gt;This paragraph is not managed by Angular.&lt;/p&gt;\r\n  &lt;div ng-app&gt;\r\n    &lt;p&gt;This paragraph is managed by Angular.&lt;/p&gt;\r\n    &lt;div ng-controller=&quot;MyController&quot;&gt;\r\n      &lt;p&gt;This paragraph is managed by Angular and its scope is tied to the MyController controller.&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;</pre>\r\n<p>\r\n  At this point, you are now ready to code up <code>MyController</code>:</p>\r\n<pre class=\"brush:html\">\r\nfunction MyController($scope) {\r\n  // controller logic goes here\r\n}</pre>\r\n<h2>\r\n  Modularizing your Angular Code</h2>\r\n<p>\r\n  Once your app starts to grow in complexity, you may benefit from using Angular modules. To use modules with an existing website, simple specify the module you want to load using the <code>ng-app</code> attribute:</p>\r\n<pre class=\"brush:html\">\r\n&lt;div&gt;\r\n  &lt;p&gt;This paragraph is not managed by Angular.&lt;/p&gt;\r\n  &lt;div ng-app=&quot;CoolModule&quot;&gt;\r\n    &lt;p&gt;This paragraph is managed by Angular.&lt;/p&gt;\r\n    &lt;div ng-controller=&quot;MyController&quot;&gt;\r\n      &lt;p&gt;This paragraph is managed by Angular and its scope is tied to the MyController controller.&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;</pre>\r\n<p>\r\n  In JavaScript, you can wire up your module like this:</p>\r\n<pre class=\"brush:js\">\r\nvar module = angular.module(&#39;CoolModule&#39;, []);\r\nmodule.controller(&#39;MyController&#39;, function($scope) {\r\n  // controller logic goes here\r\n});</pre>\r\n<h2>\r\n  Advanced Angularizations</h2>\r\n<p>\r\n  Sometimes you won&#39;t want to load the angular module immediately on page load. For example, if you have a tabbed interface and one of the tabs needs to be powered by Angular, then you might not want to run any of the Angular code until that tab is selected. To do that, you&#39;ll need to fire up your favorite JavaScript editor and manually bootstrap your Angular module when the tab is selected.</p>\r\n<p>\r\n  To demonstrate this, let&#39;s assume a simple tabbed interface where the first tab (non-Angular) is shown by default and the second tab needs to be powered by Angular. A simple jQuery implementation might look something like this:</p>\r\n<pre class=\"brush:html\">\r\n&lt;ul class=&quot;tabs&quot;&gt;\r\n  &lt;li id=&quot;tab1&quot;&gt;Tab 1 (non-Angular)&lt;/li&gt;\r\n  &lt;li id=&quot;tab2&quot;&gt;Tab 2 (Angular)&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;div class=&quot;tab&quot; rel=&quot;tab1&quot;&gt;\r\n  Some non-Angular stuff\r\n&lt;/div&gt;\r\n&lt;div class=&quot;tab&quot; rel=&quot;tab2&quot;&gt;\r\n  Some Angular stuff\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\n$(&#39;div.tab&#39;).hide(0);\r\n$(&#39;ul.tabs &gt; li&#39;).click(function(event) {\r\n  var id = $(this).attr(&#39;id&#39;);\r\n  $(&#39;div.tab:visible&#39;).hide(0);\r\n  $(&#39;div[rel=&quot;&#39; + id + &#39;&quot;]).show();\r\n}).eq(0).click();\r\n&lt;/script&gt;</pre>\r\n<p>\r\n  With this code, we have a basic working tabbed interface but tab2 is not managed by Angular like it should. To Angularize tab2 and only when it&#39;s selected, the code above can be updated like this:</p>\r\n<pre class=\"brush:html\">\r\n&lt;ul class=&quot;tabs&quot;&gt;\r\n  &lt;li id=&quot;tab1&quot;&gt;Tab 1 (non-Angular)&lt;/li&gt;\r\n  &lt;li id=&quot;tab2&quot;&gt;Tab 2 (Angular)&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;div class=&quot;tab&quot; rel=&quot;tab1&quot;&gt;\r\n  Some non-Angular stuff\r\n&lt;/div&gt;\r\n&lt;div class=&quot;tab&quot; rel=&quot;tab2&quot;&gt;\r\n  &lt;div ng-controller=&quot;MyController&quot;&gt;\r\n    Some Angular stuff\r\n  &lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\n$(&#39;div.tab&#39;).hide(0);\r\n$(&#39;ul.tabs &gt; li&#39;).click(function(event) {\r\n  var id = $(this).attr(&#39;id&#39;);\r\n  $(&#39;div.tab:visible&#39;).hide(0);\r\n  $(&#39;div.tab[rel=&quot;&#39; + id + &#39;&quot;]).show();\r\n\r\n  // Angularize the tab if tab2 was clicked\r\n  if (&#39;tab2&#39; === id&#39;) {\r\n    var $tab = $(&#39;div.tab[rel=&quot;tab2&quot;]&#39;);\r\n    // Only bootstrap this tab if it has not already been bootstrapped\r\n    if (!$tab.hasClass(&#39;ng-scope&#39;)) {\r\n      angular.bootstrap($tab[0], [&#39;coolModule&#39;]);\r\n    }\r\n}).eq(0).click();\r\n&lt;/script&gt;</pre>\r\n<p>\r\n  The main changes include:</p>\r\n<ul>\r\n  <li>\r\n    Add a child DIV with an <code>ng-controller</code> attribute to bind it with an Angular controller</li>\r\n  <li>\r\n    Manually bootstrap the div via <code>angular.bootstrap()</code>. This method accepts a DOM node and an array of Angular modules as arguments.</li>\r\n  <li>\r\n    Add logic to only bootstrap the DIV once. We can take advantage of the fact that Angular adds the class <code>ng-scope</code> to the element after it is bootstrapped, so we need only check the presence of this class to determine if we need to bootstrap the element.</li>\r\n</ul>\r\n<h2>\r\n  Communicating with Angular apps from outside of Angular code</h2>\r\n<p>\r\n  Sometimes you&#39;ll need to hint to Angular to enter a digest phase from your non-Angular code. If you are within Angular code, you can always use <code>$scope.$apply()</code> or <code>$rootScope.$apply()</code>, but how do you get access to those variables from outside of Angular code?</p>\r\n<p>\r\n  To get access to the <code>$scope</code>, simple call <code>angular.element()</code> and pass in the element that has your <code>ng-controller</code> attribute. That will return an object with a <code>scope()</code> method, which will return the <code>$scope</code> for that element:</p>\r\n<pre class=\"brush:js\">\r\nvar elem = $(&#39;div[ng-controller]&#39;)[0];\r\nvar $scope = angular.element(elem).scope();\r\n$scope.$apply();</pre>\r\n<p>\r\n  To get the <code>$rootScope</code>, you can use the same technique, but this time pass in the element that has your <code>ng-app</code> attribute:</p>\r\n<pre class=\"brush:js\">\r\nvar elem = $(&#39;div[ng-app]&#39;)[0];\r\nvar $rootScope = angular.element(elem).scope();\r\n$rootScope.$apply();</pre>\r\n<h2>\r\n  Conclusion</h2>\r\n<p>\r\n  Angular isn&#39;t just for fresh new green field projects. You can easily introduce your existing website to Angular and take advantage of all its two-way binding, clear separation of concerns, and declarative markup one section at a time.</p>"
  status: "published"
  created: "2013-08-21 22:45:16"
  modified: "2013-08-21 22:47:56"
  published: "2013-08-21 22:45:16"

